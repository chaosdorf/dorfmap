// flow-typed signature: dc11c882f9fb8bfed810f01bb166e353
// flow-typed version: <<STUB>>/material-ui_v0.18/flow_v0.46.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'material-ui'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare class $materialUi$AppBar extends React$Component {
  props: {
    /*
 Can be used to render a tab inside an app bar for instance.
 */
    children?: React$Element<*>,
    /*
 Applied to the app bar's root element.
 */
    className?: string,
    /*
 The classname of the icon on the left of the app bar.
 If you are using a stylesheet for your icons, enter the class name for the icon to be used here.
 */
    iconClassNameLeft?: string,
    /*
 Similiar to the iconClassNameLeft prop except that
 it applies to the icon displayed on the right of the app bar.
 */
    iconClassNameRight?: string,
    /*
 The custom element to be displayed on the left side of the
 app bar such as an SvgIcon.
 */
    iconElementLeft?: React$Element<*>,
    /*
 Similiar to the iconElementLeft prop except that this element is displayed on the right of the app bar.
 */
    iconElementRight?: React$Element<*>,
    /*
 Override the inline-styles of the element displayed on the left side of the app bar.
 */
    iconStyleLeft?: Object,
    /*
 Override the inline-styles of the element displayed on the right side of the app bar.
 */
    iconStyleRight?: Object,
    /*
 Callback function for when the left icon is selected via a touch tap.

 @param {object} event TouchTap event targeting the left `IconButton`.
 */
    onLeftIconButtonTouchTap?: (e: SyntheticMouseEvent) => any,
    /*
 Callback function for when the right icon is selected via a touch tap.

 @param {object} event TouchTap event targeting the right `IconButton`.
 */
    onRightIconButtonTouchTap?: (e: SyntheticMouseEvent) => any,
    /*
 Callback function for when the title text is selected via a touch tap.

 @param {object} event TouchTap event targeting the `title` node.
 */
    onTitleTouchTap?: (e: SyntheticMouseEvent) => any,
    /*
 Determines whether or not to display the Menu icon next to the title.
 Setting this prop to false will hide the icon.
 */
    showMenuIconButton?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The title to display on the app bar.
 */
    title?: React$Element<*>,
    /*
 Override the inline-styles of the app bar's title element.
 */
    titleStyle?: Object,
    /*
 The zDepth of the component.
 The shadow of the app bar is also dependent on this property.
 */
    zDepth?: number
  }
}

declare class $materialUi$AutoComplete extends React$Component {
  props: {
    /*
 Location of the anchor for the auto complete.
 */
    anchorOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 If true, the auto complete is animated as it is toggled.
 */
    animated?: boolean,
    /*
 Override the default animation component used.
 */
    animation?: Function,
    /*
 Array of strings or nodes used to populate the list.
 */
    dataSource: React$Element<*>[],
    /*
 Config for objects list dataSource.

 @typedef {Object} dataSourceConfig

 @property {string} text `dataSource` element key used to find a string to be matched for search
 and shown as a `TextField` input value after choosing the result.
 @property {string} value `dataSource` element key used to find a string to be shown in search results.
 */
    dataSourceConfig?: Object,
    /*
 Disables focus ripple when true.
 */
    disableFocusRipple?: boolean,
    /*
 Override style prop for error.
 */
    errorStyle?: Object,
    /*
 The error content to display.
 */
    errorText?: React$Element<*>,
    /*
 Callback function used to filter the auto complete.

 @param {string} searchText The text to search for within `dataSource`.
 @param {string} key `dataSource` element, or `text` property on that element if it's not a string.
 @returns {boolean} `true` indicates the auto complete list will include `key` when the input is `searchText`.
 */
    filter?: (searchText: string, key: string) => boolean,
    /*
 The content to use for adding floating label element.
 */
    floatingLabelText?: React$Element<*>,
    /*
 If true, the field receives the property `width: 100%`.
 */
    fullWidth?: boolean,
    /*
 The hint content to display.
 */
    hintText?: React$Element<*>,
    /*
 Override style for list.
 */
    listStyle?: Object,
    /*
 The max number of search results to be shown.
 By default it shows all the items which matches filter.
 */
    maxSearchResults?: number,
    /*
 Delay for closing time of the menu.
 */
    menuCloseDelay?: number,
    /*
 Props to be passed to menu.
 */
    menuProps?: Object,
    /*
 Override style for menu.
 */
    menuStyle?: Object,
    /*
 @ignore
 */
    onBlur?: Function,
    /*
 Callback function fired when the menu is closed.
 */
    onClose?: Function,
    /*
 @ignore
 */
    onFocus?: Function,
    /*
 @ignore
 */
    onKeyDown?: Function,
    /*
 Callback function that is fired when a list item is selected, or enter is pressed in the `TextField`.

 @param {string} chosenRequest Either the `TextField` input value, if enter is pressed in the `TextField`,
 or the text value of the corresponding list item that was selected.
 @param {number} index The index in `dataSource` of the list item selected, or `-1` if enter is pressed in the
 `TextField`.
 */
    onNewRequest?: (chosenRequest: string, index: number) => any,
    /*
 Callback function that is fired when the user updates the `TextField`.

 @param {string} searchText The auto-complete's `searchText` value.
 @param {array} dataSource The auto-complete's `dataSource` array.
 @param {object} params Additional information linked the update.
 */
    onUpdateInput?: (
      searchText: string,
      dataSource: any[],
      params: Object
    ) => any,
    /*
 Auto complete menu is open if true.
 */
    open?: boolean,
    /*
 If true, the list item is showed when a focus event triggers.
 */
    openOnFocus?: boolean,
    /*
 Props to be passed to popover.
 */
    popoverProps?: Object,
    /*
 Text being input to auto complete.
 */
    searchText?: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Origin for location of target.
 */
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 Override the inline-styles of AutoComplete's TextField element.
 */
    textFieldStyle?: Object
  }
}

declare class $materialUi$Avatar extends React$Component {
  props: {
    /*
 The backgroundColor of the avatar. Does not apply to image avatars.
 */
    backgroundColor?: string,
    /*
 Can be used, for instance, to render a letter inside the avatar.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root `div` or `img` element.
 */
    className?: string,
    /*
 The icon or letter's color.
 */
    color?: string,
    /*
 This is the SvgIcon or FontIcon to be used inside the avatar.
 */
    icon?: React$Element<*>,
    /*
 This is the size of the avatar in pixels.
 */
    size?: number,
    /*
 If passed in, this component will render an img element. Otherwise, a div will be rendered.
 */
    src?: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Badge extends React$Component {
  props: {
    /*
 This is the content rendered within the badge.
 */
    badgeContent: React$Element<*>,
    /*
 Override the inline-styles of the badge element.
 */
    badgeStyle?: Object,
    /*
 The badge will be added relativelty to this node.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 If true, the badge will use the primary badge colors.
 */
    primary?: boolean,
    /*
 If true, the badge will use the secondary badge colors.
 */
    secondary?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$BottomNavigation extends React$Component {
  props: {
    /*
 The `BottomNavigationItem`s to populate the element with.
 */
    children?: React$Element<*>,
    /*
 The index of the currently selected navigation item.
 */
    selectedIndex?: number,
    /*
 @ignore
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$BottomNavigation$BottomNavigationItem
  extends React$Component {
  props: {
    /*
 Set the icon representing the view for this item.
 */
    icon?: React$Element<*>,
    /*
 Set the label describing the view for this item.
 */
    label?: React$Element<*>,
    /*
 @ignore
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Card extends React$Component {
  props: {
    /*
 Can be used to render elements inside the Card.
 */
    children?: React$Element<*>,
    /*
 Override the inline-styles of the container element.
 */
    containerStyle?: Object,
    /*
 If true, this card component is expandable. Can be set on any child of the `Card` component.
 */
    expandable?: boolean,
    /*
 Whether this card is expanded.
 If `true` or `false` the component is controlled.
 if `null` the component is uncontrolled.
 */
    expanded?: boolean,
    /*
 Whether this card is initially expanded.
 */
    initiallyExpanded?: boolean,
    /*
 Callback function fired when the `expandable` state of the card has changed.

 @param {boolean} newExpandedState Represents the new `expanded` state of the card.
 */
    onExpandChange?: (newExpandedState: boolean) => any,
    /*
 If true, this card component will include a button to expand the card. `CardTitle`,
 `CardHeader` and `CardActions` implement `showExpandableButton`. Any child component
 of `Card` can implements `showExpandableButton` or forwards the property to a child
 component supporting it.
 */
    showExpandableButton?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Card$CardActions extends React$Component {
  props: {
    /*
 If true, a click on this card component expands the card.
 */
    actAsExpander?: boolean,
    /*
 Can be used to render elements inside the Card Action.
 */
    children?: React$Element<*>,
    /*
 If true, this card component is expandable.
 */
    expandable?: boolean,
    /*
 If true, this card component will include a button to expand the card.
 */
    showExpandableButton?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Card$CardExpandable extends React$Component {
  props: {
    closeIcon?: React$Element<*>,
    expanded?: boolean,
    onExpanding: Function,
    openIcon?: React$Element<*>,
    style?: Object
  }
}

declare class $materialUi$Card$CardHeader extends React$Component {
  props: {
    /*
 If true, a click on this card component expands the card.
 */
    actAsExpander?: boolean,
    /*
 This is the [Avatar](/#/components/avatar) element to be displayed on the Card Header.
 If `avatar` is an `Avatar` or other element, it will be rendered.
 If `avatar` is a string, it will be used as the image `src` for an `Avatar`.
 */
    avatar?: React$Element<*>,
    /*
 Can be used to render elements inside the Card Header.
 */
    children?: React$Element<*>,
    /*
 Can be used to pass a closeIcon if you don't like the default expandable close Icon.
 */
    closeIcon?: React$Element<*>,
    /*
 If true, this card component is expandable.
 */
    expandable?: boolean,
    /*
 Can be used to pass a openIcon if you don't like the default expandable open Icon.
 */
    openIcon?: React$Element<*>,
    /*
 If true, this card component will include a button to expand the card.
 */
    showExpandableButton?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Can be used to render a subtitle in Card Header.
 */
    subtitle?: React$Element<*>,
    /*
 Override the subtitle color.
 */
    subtitleColor?: string,
    /*
 Override the inline-styles of the subtitle.
 */
    subtitleStyle?: Object,
    /*
 Override the inline-styles of the text.
 */
    textStyle?: Object,
    /*
 Can be used to render a title in Card Header.
 */
    title?: React$Element<*>,
    /*
 Override the title color.
 */
    titleColor?: string,
    /*
 Override the inline-styles of the title.
 */
    titleStyle?: Object
  }
}

declare class $materialUi$Card$CardMedia extends React$Component {
  props: {
    /*
 If true, a click on this card component expands the card.
 */
    actAsExpander?: boolean,
    /*
 Can be used to render elements inside the Card Media.
 */
    children?: React$Element<*>,
    /*
 If true, this card component is expandable.
 */
    expandable?: boolean,
    /*
 Override the inline-styles of the Card Media.
 */
    mediaStyle?: Object,
    /*
 Can be used to render overlay element in Card Media.
 */
    overlay?: React$Element<*>,
    /*
 Override the inline-styles of the overlay container.
 */
    overlayContainerStyle?: Object,
    /*
 Override the inline-styles of the overlay content.
 */
    overlayContentStyle?: Object,
    /*
 Override the inline-styles of the overlay element.
 */
    overlayStyle?: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Card$CardText extends React$Component {
  props: {
    /*
 If true, a click on this card component expands the card.
 */
    actAsExpander?: boolean,
    /*
 Can be used to render elements inside the Card Text.
 */
    children?: React$Element<*>,
    /*
 Override the CardText color.
 */
    color?: string,
    /*
 If true, this card component is expandable.
 */
    expandable?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Card$CardTitle extends React$Component {
  props: {
    /*
 If true, a click on this card component expands the card.
 */
    actAsExpander?: boolean,
    /*
 Can be used to render elements inside the Card Title.
 */
    children?: React$Element<*>,
    /*
 If true, this card component is expandable.
 */
    expandable?: boolean,
    /*
 If true, this card component will include a button to expand the card.
 */
    showExpandableButton?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Can be used to render a subtitle in the Card Title.
 */
    subtitle?: React$Element<*>,
    /*
 Override the subtitle color.
 */
    subtitleColor?: string,
    /*
 Override the inline-styles of the subtitle.
 */
    subtitleStyle?: Object,
    /*
 Can be used to render a title in the Card Title.
 */
    title?: React$Element<*>,
    /*
 Override the title color.
 */
    titleColor?: string,
    /*
 Override the inline-styles of the title.
 */
    titleStyle?: Object
  }
}

declare class $materialUi$Checkbox extends React$Component {
  props: {
    /*
 Checkbox is checked if true.
 */
    checked?: boolean,
    /*
 The SvgIcon to use for the checked state.
 This is useful to create icon toggles.
 */
    checkedIcon?: React$Element<*>,
    /*
 The default state of our checkbox component.
 **Warning:** This cannot be used in conjunction with `checked`.
 Decide between using a controlled or uncontrolled input element and remove one of these props.
 More info: https://fb.me/react-controlled-components
 */
    defaultChecked?: boolean,
    /*
 Disabled if true.
 */
    disabled?: boolean,
    /*
 Overrides the inline-styles of the icon element.
 */
    iconStyle?: Object,
    /*
 Overrides the inline-styles of the input element.
 */
    inputStyle?: Object,
    /*
 Where the label will be placed next to the checkbox.
 */
    labelPosition?: 'left' | 'right',
    /*
 Overrides the inline-styles of the Checkbox element label.
 */
    labelStyle?: Object,
    /*
 Callback function that is fired when the checkbox is checked.

 @param {object} event `change` event targeting the underlying checkbox `input`.
 @param {boolean} isInputChecked The `checked` value of the underlying checkbox `input`.
 */
    onCheck?: (event: Object, isInputChecked: boolean) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The SvgIcon to use for the unchecked state.
 This is useful to create icon toggles.
 */
    uncheckedIcon?: React$Element<*>,
    /*
 ValueLink for when using controlled checkbox.
 */
    valueLink?: Object
  }
}

declare class $materialUi$Chip extends React$Component {
  props: {
    /*
 Override the background color of the chip.
 */
    backgroundColor?: string,
    /*
 Used to render elements inside the Chip.
 */
    children?: React$Element<*>,
    /*
 CSS `className` of the root element.
 */
    className?: React$Element<*>,
    /*
 The element to use as the container for the Chip. Either a string to
 use a DOM element or a ReactElement.
 */
    containerElement?: string | React$Element<*>,
    /*
 Override the label color.
 */
    labelColor?: string,
    /*
 Override the inline-styles of the label.
 */
    labelStyle?: Object,
    /*
 @ignore
 */
    onBlur?: Function,
    /*
 @ignore
 */
    onFocus?: Function,
    /*
 @ignore
 */
    onKeyDown?: Function,
    /*
 @ignore
 */
    onKeyboardFocus?: Function,
    /*
 @ignore
 */
    onMouseDown?: Function,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onMouseUp?: Function,
    /*
 Callback function fired when the delete icon is clicked. If set, the delete icon will be shown.
 @param {object} event `touchTap` event targeting the element.
 */
    onRequestDelete?: (event: Object) => any,
    /*
 @ignore
 */
    onTouchEnd?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 Callback function fired when the `Chip` element is touch-tapped.

 @param {object} event TouchTap event targeting the element.
 */
    onTouchTap?: (event: Object) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$CircularProgress extends React$Component {
  props: {
    /*
 Override the progress's color.
 */
    color?: string,
    /*
 Style for inner wrapper div.
 */
    innerStyle?: Object,
    /*
 The max value of progress, only works in determinate mode.
 */
    max?: number,
    /*
 The min value of progress, only works in determinate mode.
 */
    min?: number,
    /*
 The mode of show your progress, indeterminate
 for when there is no value for progress.
 */
    mode?: 'determinate' | 'indeterminate',
    /*
 The diameter of the progress in pixels.
 */
    size?: number,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Stroke width in pixels.
 */
    thickness?: number,
    /*
 The value of progress, only works in determinate mode.
 */
    value?: number
  }
}

declare class $materialUi$DatePicker$Calendar extends React$Component {
  props: {
    DateTimeFormat: Function,
    autoOk?: boolean,
    cancelLabel?: React$Element<*>,
    disableYearSelection?: boolean,
    firstDayOfWeek?: number,
    hideCalendarDate?: boolean,
    initialDate?: Object,
    locale: string,
    maxDate?: Object,
    minDate?: Object,
    mode?: 'portrait' | 'landscape',
    okLabel?: React$Element<*>,
    onTouchTapCancel?: Function,
    onTouchTapDay?: Function,
    onTouchTapOk?: Function,
    open?: boolean,
    shouldDisableDate?: Function,
    utils?: Object
  }
}

declare class $materialUi$DatePicker$CalendarActionButtons
  extends React$Component {
  props: {
    autoOk?: boolean,
    cancelLabel?: React$Element<*>,
    okLabel?: React$Element<*>,
    onTouchTapCancel?: Function,
    onTouchTapOk?: Function
  }
}

declare class $materialUi$DatePicker$CalendarMonth extends React$Component {
  props: {
    DateTimeFormat: Function,
    autoOk?: boolean,
    displayDate: Object,
    firstDayOfWeek?: number,
    locale: string,
    maxDate?: Object,
    minDate?: Object,
    onTouchTapDay?: Function,
    selectedDate: Object,
    shouldDisableDate?: Function,
    utils: Object
  }
}

declare class $materialUi$DatePicker$CalendarToolbar extends React$Component {
  props: {
    DateTimeFormat: Function,
    displayDate: Object,
    locale: string,
    nextMonth?: boolean,
    onMonthChange?: Function,
    prevMonth?: boolean
  }
}

declare class $materialUi$DatePicker$CalendarYear extends React$Component {
  props: {
    DateTimeFormat: Function,
    locale: string,
    maxDate: Object,
    minDate: Object,
    onTouchTapYear?: Function,
    selectedDate: Object,
    utils: Object,
    wordings?: Object
  }
}

declare class $materialUi$DatePicker$DateDisplay extends React$Component {
  props: {
    DateTimeFormat: Function,
    disableYearSelection?: boolean,
    locale: string,
    mode?: 'portrait' | 'landscape',
    monthDaySelected?: boolean,
    onTouchTapMonthDay?: Function,
    onTouchTapYear?: Function,
    selectedDate: Object,
    style?: Object
  }
}

declare class $materialUi$DatePicker extends React$Component {
  props: {
    /*
 Constructor for date formatting for the specified `locale`.
 The constructor must follow this specification: ECMAScript Internationalization API 1.0 (ECMA-402).
 `Intl.DateTimeFormat` is supported by most modern browsers, see http://caniuse.com/#search=intl,
 otherwise https://github.com/andyearnshaw/Intl.js is a good polyfill.

 By default, a built-in `DateTimeFormat` is used which supports the 'en-US' `locale`.
 */
    DateTimeFormat?: Function,
    /*
 If true, automatically accept and close the picker on select a date.
 */
    autoOk?: boolean,
    /*
 Override the default text of the 'Cancel' button.
 */
    cancelLabel?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Used to control how the Date Picker will be displayed when the input field is focused.
 `dialog` (default) displays the DatePicker as a dialog with a modal.
 `inline` displays the DatePicker below the input field (similar to auto complete).
 */
    container?: 'dialog' | 'inline',
    /*
 This is the initial date value of the component.
 If either `value` or `valueLink` is provided they will override this
 prop with `value` taking precedence.
 */
    defaultDate?: Object,
    /*
 Override the inline-styles of DatePickerDialog's Container element.
 */
    dialogContainerStyle?: Object,
    /*
 Disables the year selection in the date picker.
 */
    disableYearSelection?: boolean,
    /*
 Disables the DatePicker.
 */
    disabled?: boolean,
    /*
 Used to change the first day of week. It varies from
 Saturday to Monday between different locales.
 The allowed range is 0 (Sunday) to 6 (Saturday).
 The default is `1`, Monday, as per ISO 8601.
 */
    firstDayOfWeek?: number,
    /*
 This function is called to format the date displayed in the input field, and should return a string.
 By default if no `locale` and `DateTimeFormat` is provided date objects are formatted to ISO 8601 YYYY-MM-DD.

 @param {object} date Date object to be formatted.
 @returns {any} The formatted date.
 */
    formatDate?: (date: Object) => any,
    /*
 Hide date display
 */
    hideCalendarDate?: boolean,
    /*
 Locale used for formatting the `DatePicker` date strings. Other than for 'en-US', you
 must provide a `DateTimeFormat` that supports the chosen `locale`.
 */
    locale?: string,
    /*
 The ending of a range of valid dates. The range includes the endDate.
 The default value is current date + 100 years.
 */
    maxDate?: Object,
    /*
 The beginning of a range of valid dates. The range includes the startDate.
 The default value is current date - 100 years.
 */
    minDate?: Object,
    /*
 Tells the component to display the picker in portrait or landscape mode.
 */
    mode?: 'portrait' | 'landscape',
    /*
 Override the default text of the 'OK' button.
 */
    okLabel?: React$Element<*>,
    /*
 Callback function that is fired when the date value changes.

 @param {null} null Since there is no particular event associated with the change,
 the first argument will always be null.
 @param {object} date The new date.
 */
    onChange?: (e: null, date: Object) => any,
    /*
 Callback function that is fired when the Date Picker's dialog is dismissed.
 */
    onDismiss?: Function,
    /*
 Callback function that is fired when the Date Picker's `TextField` gains focus.
 */
    onFocus?: Function,
    /*
 Callback function that is fired when the Date Picker's dialog is shown.
 */
    onShow?: Function,
    /*
 Callback function that is fired when a touch tap event occurs on the Date Picker's `TextField`.

 @param {object} event TouchTap event targeting the `TextField`.
 */
    onTouchTap?: (event: Object) => any,
    /*
 Callback function used to determine if a day's entry should be disabled on the calendar.

 @param {object} day Date object of a day.
 @returns {boolean} Indicates whether the day should be disabled.
 */
    shouldDisableDate?: Function,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override the inline-styles of DatePicker's TextField element.
 */
    textFieldStyle?: Object,
    /*
 This object should contain methods needed to build the calendar system.

 Useful for building a custom calendar system. Refer to the
 [source code](https://github.com/callemall/material-ui/blob/master/src/DatePicker/dateUtils.js)
 and an [example implementation](https://github.com/alitaheri/material-ui-persian-date-picker-utils)
 for more information.
 */
    utils?: Object,
    /*
 Sets the date for the Date Picker programmatically.
 */
    value?: Object
  }
}

declare class $materialUi$DatePicker$DatePickerDialog extends React$Component {
  props: {
    DateTimeFormat?: Function,
    animation?: Function,
    autoOk?: boolean,
    cancelLabel?: React$Element<*>,
    container?: 'dialog' | 'inline',
    containerStyle?: Object,
    disableYearSelection?: boolean,
    firstDayOfWeek?: number,
    hideCalendarDate?: boolean,
    initialDate?: Object,
    locale?: string,
    maxDate?: Object,
    minDate?: Object,
    mode?: 'portrait' | 'landscape',
    okLabel?: React$Element<*>,
    onAccept?: Function,
    onDismiss?: Function,
    onShow?: Function,
    open?: boolean,
    shouldDisableDate?: Function,
    style?: Object,
    utils?: Object
  }
}

declare class $materialUi$DatePicker$DayButton extends React$Component {
  props: {
    DateTimeFormat: Function,
    date?: Object,
    disabled?: boolean,
    locale: string,
    onKeyboardFocus?: Function,
    onTouchTap?: Function,
    selected?: boolean
  }
}

declare class $materialUi$DatePicker$YearButton extends React$Component {
  props: {
    children: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    onTouchTap?: Function,
    selected?: boolean,
    utils: Object,
    year: number
  }
}

declare class $materialUi$Dialog extends React$Component {
  props: {
    /*
 Action buttons to display below the Dialog content (`children`).
 This property accepts either a React element, or an array of React elements.
 */
    actions?: React$Element<*>,
    /*
 The `className` to add to the actions container's root element.
 */
    actionsContainerClassName?: string,
    /*
 Overrides the inline-styles of the actions container's root element.
 */
    actionsContainerStyle?: Object,
    /*
 If set to true, the height of the `Dialog` will be auto detected. A max height
 will be enforced so that the content does not extend beyond the viewport.
 */
    autoDetectWindowHeight?: boolean,
    /*
 If set to true, the body content of the `Dialog` will be scrollable.
 */
    autoScrollBodyContent?: boolean,
    /*
 The `className` to add to the content's root element under the title.
 */
    bodyClassName?: string,
    /*
 Overrides the inline-styles of the content's root element under the title.
 */
    bodyStyle?: Object,
    /*
 The contents of the `Dialog`.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 The `className` to add to the content container.
 */
    contentClassName?: string,
    /*
 Overrides the inline-styles of the content container.
 */
    contentStyle?: Object,
    /*
 Force the user to use one of the actions in the `Dialog`.
 Clicking outside the `Dialog` will not trigger the `onRequestClose`.
 */
    modal?: boolean,
    /*
 Fired when the `Dialog` is requested to be closed by a click outside the `Dialog` or on the buttons.

 @param {bool} buttonClicked Determines whether a button click triggered this request.
 */
    onRequestClose?: Function,
    /*
 Controls whether the Dialog is opened or not.
 */
    open: boolean,
    /*
 The `className` to add to the `Overlay` component that is rendered behind the `Dialog`.
 */
    overlayClassName?: string,
    /*
 Overrides the inline-styles of the `Overlay` component that is rendered behind the `Dialog`.
 */
    overlayStyle?: Object,
    /*
 Determines whether the `Dialog` should be repositioned when it's contents are updated.
 */
    repositionOnUpdate?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The title to display on the `Dialog`. Could be number, string, element or an array containing these types.
 */
    title?: React$Element<*>,
    /*
 The `className` to add to the title's root container element.
 */
    titleClassName?: string,
    /*
 Overrides the inline-styles of the title's root container element.
 */
    titleStyle?: Object
  }
}

declare class $materialUi$Divider extends React$Component {
  props: {
    /*
 If true, the `Divider` will be indented.
 */
    inset?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Drawer extends React$Component {
  props: {
    /*
 The contents of the `Drawer`
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 The CSS class name of the container element.
 */
    containerClassName?: string,
    /*
 Override the inline-styles of the container element.
 */
    containerStyle?: Object,
    /*
 If true, swiping sideways when the `Drawer` is closed will not open it.
 */
    disableSwipeToOpen?: boolean,
    /*
 If true, the `Drawer` will be docked. In this state, the overlay won't show and
 clicking on a menu item will not close the `Drawer`.
 */
    docked?: boolean,
    /*
 Callback function fired when the `open` state of the `Drawer` is requested to be changed.

 @param {boolean} open If true, the `Drawer` was requested to be opened.
 @param {string} reason The reason for the open or close request. Possible values are
 'swipe' for open requests; 'clickaway' (on overlay clicks),
 'escape' (on escape key press), and 'swipe' for close requests.
 */
    onRequestChange?: (
      open: boolean,
      reason: 'swipe' | 'clickaway' | 'escape'
    ) => any,
    /*
 If true, the `Drawer` is opened.  Providing a value will turn the `Drawer`
 into a controlled component.
 */
    open?: boolean,
    /*
 If true, the `Drawer` is positioned to open from the opposite side.
 */
    openSecondary?: boolean,
    /*
 The CSS class name to add to the `Overlay` component that is rendered behind the `Drawer`.
 */
    overlayClassName?: string,
    /*
 Override the inline-styles of the `Overlay` component that is rendered behind the `Drawer`.
 */
    overlayStyle?: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The width of the left most (or right most) area in pixels where the `Drawer` can be
 swiped open from. Setting this to `null` spans that area to the entire page
 (**CAUTION!** Setting this property to `null` might cause issues with sliders and
 swipeable `Tabs`: use at your own risk).
 */
    swipeAreaWidth?: number,
    /*
 The width of the `Drawer` in pixels or percentage in string format ex. `50%` to fill
 half of the window or `100%` and so on. Defaults to using the values from theme.
 */
    width?: string | number,
    /*
 The zDepth of the `Drawer`.
 */
    zDepth?: number
  }
}

declare class $materialUi$DropDownMenu extends React$Component {
  props: {
    /*
 This is the point on the anchor that the popover's
 `targetOrigin` will attach to.
 Options:
 vertical: [top, center, bottom]
 horizontal: [left, middle, right].
 */
    anchorOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 If true, the popover will apply transitions when
 it gets added to the DOM.
 */
    animated?: boolean,
    /*
 Override the default animation component used.
 */
    animation?: Function,
    /*
 The width will automatically be set according to the items inside the menu.
 To control this width in css instead, set this prop to `false`.
 */
    autoWidth?: boolean,
    /*
 The `MenuItem`s to populate the `Menu` with. If the `MenuItems` have the
 prop `label` that value will be used to render the representation of that
 item within the field.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Disables the menu.
 */
    disabled?: boolean,
    /*
 Overrides default `SvgIcon` dropdown arrow component.
 */
    iconButton?: React$Element<*>,
    /*
 Overrides the styles of icon element.
 */
    iconStyle?: Object,
    /*
 Overrides the styles of label when the `DropDownMenu` is inactive.
 */
    labelStyle?: Object,
    /*
 The style object to use to override underlying list style.
 */
    listStyle?: Object,
    /*
 The maximum height of the `Menu` when it is displayed.
 */
    maxHeight?: number,
    /*
 Override the inline-styles of menu items.
 */
    menuItemStyle?: Object,
    /*
 Overrides the styles of `Menu` when the `DropDownMenu` is displayed.
 */
    menuStyle?: Object,
    /*
 If true, `value` must be an array and the menu will support
 multiple selections.
 */
    multiple?: boolean,
    /*
 Callback function fired when a menu item is clicked, other than the one currently selected.

 @param {object} event TouchTap event targeting the menu item that was clicked.
 @param {number} key The index of the clicked menu item in the `children` collection.
 @param {any} value If `multiple` is true, the menu's `value`
 array with either the menu item's `value` added (if
 it wasn't already selected) or omitted (if it was already selected).
 Otherwise, the `value` of the menu item.
 */
    onChange?: (event: Object, key: number, value: any) => any,
    /*
 Callback function fired when the menu is closed.
 */
    onClose?: Function,
    /*
 Set to true to have the `DropDownMenu` automatically open on mount.
 */
    openImmediately?: boolean,
    /*
 Override the inline-styles of selected menu items.
 */
    selectedMenuItemStyle?: Object,
    /*
 Callback function fired when a menu item is clicked, other than the one currently selected.

 @param {any} value If `multiple` is true, the menu's `value`
 array with either the menu item's `value` added (if
 it wasn't already selected) or omitted (if it was already selected).
 Otherwise, the `value` of the menu item.
 */
    selectionRenderer?: (value: any) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 This is the point on the popover which will attach to
 the anchor's origin.
 Options:
 vertical: [top, center, bottom]
 horizontal: [left, middle, right].
 */
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 Overrides the inline-styles of the underline.
 */
    underlineStyle?: Object,
    /*
 If `multiple` is true, an array of the `value`s of the selected
 menu items. Otherwise, the `value` of the selected menu item.
 If provided, the menu will be a controlled component.
 */
    value?: any
  }
}

declare class $materialUi$FlatButton extends React$Component {
  props: {
    /*
 Color of button when mouse is not hovering over it.
 */
    backgroundColor?: string,
    /*
 This is what will be displayed inside the button.
 If a label is specified, the text within the label prop will
 be displayed. Otherwise, the component will expect children
 which will then be displayed. (In our example,
 we are nesting an `<input type="file" />` and a `span`
 that acts as our label to be displayed.) This only
 applies to flat and raised buttons.
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 The element to use as the container for the FlatButton. Either a string to
 use a DOM element or a ReactElement. This is useful for wrapping the
 FlatButton in a custom Link component. If a ReactElement is given, ensure
 that it passes all of its given props through to the underlying DOM
 element and renders its children prop for proper integration.
 */
    containerElement?: string | React$Element<*>,
    /*
 If true, the element's ripple effect will be disabled.
 */
    disableTouchRipple?: boolean,
    /*
 Disables the button if set to true.
 */
    disabled?: boolean,
    /*
 If true, the button will take up the full width of its container.
 */
    fullWidth?: boolean,
    /*
 Color of button when mouse hovers over.
 */
    hoverColor?: string,
    /*
 The URL to link to when the button is clicked.
 */
    href?: string,
    /*
 Use this property to display an icon.
 */
    icon?: React$Element<*>,
    /*
 Label for the button.
 */
    label?: string,
    /*
 Place label before or after the passed children.
 */
    labelPosition?: 'before' | 'after',
    /*
 Override the inline-styles of the button's label element.
 */
    labelStyle?: Object,
    /*
 Callback function fired when the element is focused or blurred by the keyboard.

 @param {object} event `focus` or `blur` event targeting the element.
 @param {boolean} isKeyboardFocused Indicates whether the element is focused.
 */
    onKeyboardFocus?: (event: Object, isKeyboardFocused: boolean) => any,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 Callback function fired when the button is touch-tapped.

 @param {object} event TouchTap event targeting the button.
 */
    onTouchTap?: (event: Object) => any,
    /*
 If true, colors button according to
 primaryTextColor from the Theme.
 */
    primary?: boolean,
    /*
 Color for the ripple after button is clicked.
 */
    rippleColor?: string,
    /*
 If true, colors button according to secondaryTextColor from the theme.
 The primary prop has precendent if set to true.
 */
    secondary?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$FlatButton$FlatButtonLabel extends React$Component {
  props: {
    label?: React$Element<*>,
    style?: Object
  }
}

declare class $materialUi$FloatingActionButton extends React$Component {
  props: {
    /*
 This value will override the default background color for the button.
 However it will not override the default disabled background color.
 This has to be set separately using the disabledColor attribute.
 */
    backgroundColor?: string,
    /*
 This is what displayed inside the floating action button; for example, a SVG Icon.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Disables the button if set to true.
 */
    disabled?: boolean,
    /*
 This value will override the default background color for the button when it is disabled.
 */
    disabledColor?: string,
    /*
 The URL to link to when the button is clicked.
 */
    href?: string,
    /*
 The icon within the FloatingActionButton is a FontIcon component.
 This property is the classname of the icon to be displayed inside the button.
 An alternative to adding an iconClassName would be to manually insert a
 FontIcon component or custom SvgIcon component or as a child of FloatingActionButton.
 */
    iconClassName?: string,
    /*
 This is the equivalent to iconClassName except that it is used for
 overriding the inline-styles of the FontIcon component.
 */
    iconStyle?: Object,
    /*
 If true, the button will be a small floating action button.
 */
    mini?: boolean,
    /*
 @ignore
 */
    onMouseDown?: Function,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onMouseUp?: Function,
    /*
 @ignore
 */
    onTouchEnd?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 Callback function fired when the button is touch-tapped.

 @param {object} event TouchTap event targeting the button.
 */
    onTouchTap?: (event: Object) => any,
    /*
 If true, the button will use the secondary button colors.
 */
    secondary?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The zDepth of the underlying `Paper` component.
 */
    zDepth?: number
  }
}

declare class $materialUi$FontIcon extends React$Component {
  props: {
    /*
 This is the font color of the font icon. If not specified,
 this component will default to muiTheme.palette.textColor.
 */
    color?: string,
    /*
 This is the icon color when the mouse hovers over the icon.
 */
    hoverColor?: string,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$GridList extends React$Component {
  props: {
    /*
 Number of px for one, cell height.
 You can set `'auto'` if you want to let the children determine the height.
 */
    cellHeight?: number | 'auto',
    /*
 Grid Tiles that will be in Grid List.
 */
    children?: React$Element<*>,
    /*
 Number of columns.
 */
    cols?: number,
    /*
 Number of px for the padding/spacing between items.
 */
    padding?: number,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$GridList$GridTile extends React$Component {
  props: {
    /*
 An IconButton element to be used as secondary action target
 (primary action target is the tile itself).
 */
    actionIcon?: React$Element<*>,
    /*
 Position of secondary action IconButton.
 */
    actionPosition?: 'left' | 'right',
    /*
 Theoretically you can pass any node as children, but the main use case is to pass an img,
 in whichcase GridTile takes care of making the image "cover" available space
 (similar to background-size: cover or to object-fit:cover).
 */
    children?: React$Element<*>,
    /*
 Width of the tile in number of grid cells.
 */
    cols?: number,
    /*
 Either a string used as tag name for the tile root element, or a ReactElement.
 This is useful when you have, for example, a custom implementation of
 a navigation link (that knows about your routes) and you want to use it as the primary tile action.
 In case you pass a ReactElement, please ensure that it passes all props,
 accepts styles overrides and render it's children.
 */
    containerElement?: string | React$Element<*>,
    /*
 Height of the tile in number of grid cells.
 */
    rows?: number,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 String or element serving as subtitle (support text).
 */
    subtitle?: React$Element<*>,
    /*
 Override the inline-styles of the subtitle element.
 */
    subtitleStyle?: Object,
    /*
 Title to be displayed on tile.
 */
    title?: React$Element<*>,
    /*
 Style used for title bar background.
 Useful for setting custom gradients for example
 */
    titleBackground?: string,
    /*
 Position of the title bar (container of title, subtitle and action icon).
 */
    titlePosition?: 'top' | 'bottom',
    /*
 Override the inline-styles of the title element.
 */
    titleStyle?: Object
  }
}

declare class $materialUi$IconButton extends React$Component {
  props: {
    /*
 Can be used to pass a `FontIcon` element as the icon for the button.
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 If true, the element's ripple effect will be disabled.
 */
    disableTouchRipple?: boolean,
    /*
 If true, the element will be disabled.
 */
    disabled?: boolean,
    /*
 Override the inline-styles of the root element when the component is hovered.
 */
    hoveredStyle?: Object,
    /*
 The URL to link to when the button is clicked.
 */
    href?: string,
    /*
 The CSS class name of the icon. Used for setting the icon with a stylesheet.
 */
    iconClassName?: string,
    /*
 Override the inline-styles of the icon element.
 Note: you can specify iconHoverColor as a String inside this object.
 */
    iconStyle?: Object,
    /*
 @ignore
 */
    onBlur?: Function,
    /*
 @ignore
 */
    onFocus?: Function,
    /*
 Callback function fired when the element is focused or blurred by the keyboard.

 @param {object} event `focus` or `blur` event targeting the element.
 @param {boolean} keyboardFocused Indicates whether the element is focused.
 */
    onKeyboardFocus?: (event: Object, keyboardFocused: boolean) => any,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onMouseOut?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 Callback function fired when the button is touch-tapped.

 @param {object} event TouchTap event targeting the button.
 */
    onTouchTap?: (event: Object) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The text to supply to the element's tooltip.
 */
    tooltip?: React$Element<*>,
    /*
 The vertical and horizontal positions, respectively, of the element's tooltip.
 Possible values are: "bottom-center", "top-center", "bottom-right", "top-right",
 "bottom-left", and "top-left".
 */
    tooltipPosition?:
      | 'bottom-center'
      | 'top-center'
      | 'bottom-right'
      | 'top-right'
      | 'bottom-left'
      | 'top-left',
    /*
 Override the inline-styles of the tooltip element.
 */
    tooltipStyles?: Object,
    /*
 If true, increase the tooltip element's size. Useful for increasing tooltip
 readability on mobile devices.
 */
    touch?: boolean
  }
}

declare class $materialUi$IconMenu extends React$Component {
  props: {
    /*
 This is the point on the icon where the menu
 `targetOrigin` will attach.
 Options:
 vertical: [top, center, bottom]
 horizontal: [left, middle, right].
 */
    anchorOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 If true, the popover will apply transitions when
 it gets added to the DOM.
 */
    animated?: boolean,
    /*
 Override the default animation component used.
 */
    animation?: Function,
    /*
 Should be used to pass `MenuItem` components.
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 This is the `IconButton` to render. This button will open the menu.
 */
    iconButtonElement: React$Element<*>,
    /*
 Override the inline-styles of the underlying icon element.
 */
    iconStyle?: Object,
    /*
 Override the inline-styles of the underlying `List` element.
 */
    listStyle?: Object,
    /*
 Override the inline-styles of the menu element.
 */
    menuStyle?: Object,
    /*
 If true, the value can an be array and allow the menu to be a multi-select.
 */
    multiple?: boolean,
    /*
 Callback function fired when a menu item is selected with a touch-tap.

 @param {object} event TouchTap event targeting the selected menu item element.
 @param {object} child The selected element.
 */
    onItemTouchTap?: (event: Object, child: Object) => any,
    /*
 Callback function fired when the `IconButton` element is focused or blurred by the keyboard.

 @param {object} event `focus` or `blur` event targeting the `IconButton` element.
 @param {boolean} keyboardFocused If true, the `IconButton` element is focused.
 */
    onKeyboardFocus?: (event: Object, keyboardFocused: boolean) => any,
    /*
 @ignore
 */
    onMouseDown?: Function,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onMouseUp?: Function,
    /*
 Callback function fired when the `open` state of the menu is requested to be changed.

 @param {boolean} open If true, the menu was requested to be opened.
 @param {string} reason The reason for the open or close request. Possible values are
 'keyboard' and 'iconTap' for open requests; 'enter', 'escape', 'itemTap', and 'clickAway'
 for close requests.
 */
    onRequestChange?: (
      open: boolean,
      reason:
        | 'keyboard'
        | 'iconTap'
        | 'enter'
        | 'escape'
        | 'itemTap'
        | 'clickAway'
    ) => any,
    /*
 Callback function fired when the `IconButton` element is touch-tapped.

 @param {object} event TouchTap event targeting the `IconButton` element.
 */
    onTouchTap?: (event: Object) => any,
    /*
 If true, the `IconMenu` is opened.
 */
    open?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 This is the point on the menu which will stick to the menu
 origin.
 Options:
 vertical: [top, center, bottom]
 horizontal: [left, middle, right].
 */
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 Sets the delay in milliseconds before closing the
 menu when an item is clicked.
 If set to 0 then the auto close functionality
 will be disabled.
 */
    touchTapCloseDelay?: number,
    /*
 If true, the popover will render on top of an invisible
 layer, which will prevent clicks to the underlying elements.
 */
    useLayerForClickAway?: boolean
  }
}

declare class $materialUi$LinearProgress extends React$Component {
  props: {
    /*
 The color of the progress bar, defaults to
 primary color of theme.
 */
    color?: string,
    /*
 The max value of progress, only works in determinate mode.
 */
    max?: number,
    /*
 The min value of progress, only works in determinate mode.
 */
    min?: number,
    /*
 The mode of show your progress, indeterminate for when
 there is no value for progress.
 */
    mode?: 'determinate' | 'indeterminate',
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The value of progress, only works in determinate mode.
 */
    value?: number
  }
}

declare class $materialUi$List extends React$Component {
  props: {
    /*
 These are usually `ListItem`s that are passed to
 be part of the list.
 */
    children?: React$Element<*>,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$List$ListItem extends React$Component {
  props: {
    /*
 If true, generate a nested-list-indicator icon when nested list
 items are detected. Note that an indicator will not be created
 if a `rightIcon` or `rightIconButton` has been provided to
 the element.
 */
    autoGenerateNestedIndicator?: boolean,
    /*
 Children passed into the `ListItem`.
 */
    children?: React$Element<*>,
    /*
 The element to use as the container for the ListItem. Either a string to
 use a DOM element or a ReactElement. This is useful for wrapping the
 ListItem in a custom Link component. If a ReactElement is given, ensure
 that it passes all of its given props through to the underlying DOM
 element and renders its children prop for proper integration.
 */
    containerElement?: string | React$Element<*>,
    /*
 If true, the element will not be able to be focused by the keyboard.
 */
    disableKeyboardFocus?: boolean,
    /*
 If true, the element will not be clickable
 and will not display hover effects.
 This is automatically disabled if either `leftCheckbox`
 or `rightToggle` is set.
 */
    disabled?: boolean,
    /*
 Override the hover background color.
 */
    hoverColor?: string,
    /*
 If true, the nested `ListItem`s are initially displayed.
 */
    initiallyOpen?: boolean,
    /*
 Override the inline-styles of the inner div element.
 */
    innerDivStyle?: Object,
    /*
 If true, the children will be indented by 72px.
 This is useful if there is no left avatar or left icon.
 */
    insetChildren?: boolean,
    /*
 Use to control if the list item should render as keyboard focused.  If
 undefined (default), this will be automatically managed.  If provided,
 it will change the components style.  Note that this will not change the
 actual focus - and should only be used when you want to simulate
 keyboard focus (eg. in a rich text input autocomplete).
 */
    isKeyboardFocused?: boolean,
    /*
 This is the `Avatar` element to be displayed on the left side.
 */
    leftAvatar?: React$Element<*>,
    /*
 This is the `Checkbox` element to be displayed on the left side.
 */
    leftCheckbox?: React$Element<*>,
    /*
 This is the `SvgIcon` or `FontIcon` to be displayed on the left side.
 */
    leftIcon?: React$Element<*>,
    /*
 An array of `ListItem`s to nest underneath the current `ListItem`.
 */
    nestedItems?: React$Element<*>[],
    /*
 Controls how deep a `ListItem` appears.
 This property is automatically managed, so modify at your own risk.
 */
    nestedLevel?: number,
    /*
 Override the inline-styles of the nested items' `NestedList`.
 */
    nestedListStyle?: Object,
    /*
 Callback function fired when the `ListItem` is focused or blurred by the keyboard.

 @param {object} event `focus` or `blur` event targeting the `ListItem`.
 @param {boolean} isKeyboardFocused If true, the `ListItem` is focused.
 */
    onKeyboardFocus?: (event: Object, isKeyboardFocused: boolean) => any,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 Callbak function fired when the `ListItem` toggles its nested list.

 @param {object} listItem The `ListItem`.
 */
    onNestedListToggle?: (listItem: Object) => any,
    /*
 @ignore
 */
    onTouchEnd?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 @ignore
 */
    onTouchTap?: Function,
    /*
 Control toggle state of nested list.
 */
    open?: boolean,
    /*
 This is the block element that contains the primary text.
 If a string is passed in, a div tag will be rendered.
 */
    primaryText?: React$Element<*>,
    /*
 If true, clicking or tapping the primary text of the `ListItem`
 toggles the nested list.
 */
    primaryTogglesNestedList?: boolean,
    /*
 This is the `Avatar` element to be displayed on the right side.
 */
    rightAvatar?: React$Element<*>,
    /*
 This is the `SvgIcon` or `FontIcon` to be displayed on the right side.
 */
    rightIcon?: React$Element<*>,
    /*
 This is the `IconButton` to be displayed on the right side.
 Hovering over this button will remove the `ListItem` hover.
 Also, clicking on this button will not trigger a
 ripple on the `ListItem`; the event will be stopped and prevented
 from bubbling up to cause a `ListItem` click.
 */
    rightIconButton?: React$Element<*>,
    /*
 This is the `Toggle` element to display on the right side.
 */
    rightToggle?: React$Element<*>,
    /*
 This is the block element that contains the secondary text.
 If a string is passed in, a div tag will be rendered.
 */
    secondaryText?: React$Element<*>,
    /*
 Can be 1 or 2. This is the number of secondary
 text lines before ellipsis will show.
 */
    secondaryTextLines?: 1 | 2,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$List$NestedList extends React$Component {
  props: {
    children?: React$Element<*>,
    nestedLevel: number,
    open: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Menu extends React$Component {
  props: {
    /*
 If true, the width of the menu will be set automatically
 according to the widths of its children,
 using proper keyline increments (64px for desktop,
 56px otherwise).
 */
    autoWidth?: boolean,
    /*
 The content of the menu. This is usually used to pass `MenuItem`
 elements.
 */
    children?: React$Element<*>,
    /*
 If true, the menu item will render with compact desktop styles.
 */
    desktop?: boolean,
    /*
 If true, the menu will not be auto-focused.
 */
    disableAutoFocus?: boolean,
    /*
 If true, the menu will be keyboard-focused initially.
 */
    initiallyKeyboardFocused?: boolean,
    /*
 Override the inline-styles of the underlying `List` element.
 */
    listStyle?: Object,
    /*
 The maximum height of the menu in pixels. If specified,
 the menu will be scrollable if it is taller than the provided
 height.
 */
    maxHeight?: number,
    /*
 Override the inline-styles of menu items.
 */
    menuItemStyle?: Object,
    /*
 If true, `value` must be an array and the menu will support
 multiple selections.
 */
    multiple?: boolean,
    /*
 Callback function fired when a menu item with `value` not
 equal to the current `value` of the menu is touch-tapped.

 @param {object} event TouchTap event targeting the menu item.
 @param {any}  value If `multiple` is true, the menu's `value`
 array with either the menu item's `value` added (if
 it wasn't already selected) or omitted (if it was already selected).
 Otherwise, the `value` of the menu item.
 */
    onChange?: (event: Object, value: any) => any,
    /*
 Callback function fired when the menu is focused and the *Esc* key
 is pressed.

 @param {object} event `keydown` event targeting the menu.
 */
    onEscKeyDown?: (event: Object) => any,
    /*
 Callback function fired when a menu item is touch-tapped.

 @param {object} event TouchTap event targeting the menu item.
 @param {object} menuItem The menu item.
 @param {number} index The index of the menu item.
 */
    onItemTouchTap?: (event: Object, menuItem: Object, index: number) => any,
    /*
 @ignore
 */
    onKeyDown?: Function,
    /*
 Callback function fired when the focus on a `MenuItem` is changed.
 There will be some "duplicate" changes reported if two different
 focusing event happen, for example if a `MenuItem` is focused via
 the keyboard and then it is clicked on.

 @param {object} event The event that triggered the focus change.
 The event can be null since the focus can be changed for non-event
 reasons such as prop changes.
 @param {number} newFocusIndex The index of the newly focused
 `MenuItem` or `-1` if focus was lost.
 */
    onMenuItemFocusChange?: (event: Object, newFocusIndex: number) => any,
    /*
 Override the inline-styles of selected menu items.
 */
    selectedMenuItemStyle?: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 If `multiple` is true, an array of the `value`s of the selected
 menu items. Otherwise, the `value` of the selected menu item.
 If provided, the menu will be a controlled component.
 This component also supports valueLink.
 */
    value?: any,
    /*
 ValueLink for the menu's `value`.
 */
    valueLink?: Object,
    /*
 The width of the menu. If not specified, the menu's width
 will be set according to the widths of its children, using
 proper keyline increments (64px for desktop, 56px otherwise).
 */
    width?: string | number
  }
}

declare class $materialUi$MenuItem extends React$Component {
  props: {
    /*
 Location of the anchor for the popover of nested `MenuItem`
 elements.
 Options:
 horizontal: [left, middle, right]
 vertical: [top, center, bottom].
 */
    anchorOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 Override the default animation component used.
 */
    animation?: Function,
    /*
 If true, a left check mark will be rendered.
 */
    checked?: boolean,
    /*
 Elements passed as children to the underlying `ListItem`.
 */
    children?: React$Element<*>,
    /*
 @ignore
 If true, the menu item will render with compact desktop
 styles.
 */
    desktop?: boolean,
    /*
 If true, the menu item will be disabled.
 */
    disabled?: boolean,
    /*
 The focus state of the menu item. This prop is used to set the focus
 state of the underlying `ListItem`.
 */
    focusState?: 'none' | 'focused' | 'keyboard-focused',
    /*
 Override the inline-styles of the inner div.
 */
    innerDivStyle?: Object,
    /*
 If true, the children will be indented.
 This is only needed when there is no `leftIcon`.
 */
    insetChildren?: boolean,
    /*
 The `SvgIcon` or `FontIcon` to be displayed on the left side.
 */
    leftIcon?: React$Element<*>,
    /*
 `MenuItem` elements to nest within the menu item.
 */
    menuItems?: React$Element<*>,
    /*
 Callback function fired when the menu item is touch-tapped.

 @param {object} event TouchTap event targeting the menu item.
 */
    onTouchTap?: (event: Object) => any,
    /*
 Can be used to render primary text within the menu item.
 */
    primaryText?: React$Element<*>,
    /*
 The `SvgIcon` or `FontIcon` to be displayed on the right side.
 */
    rightIcon?: React$Element<*>,
    /*
 Can be used to render secondary text within the menu item.
 */
    secondaryText?: React$Element<*>,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Location on the popover of nested `MenuItem` elements that will attach
 to the anchor's origin.
 Options:
 horizontal: [left, middle, right]
 vertical: [top, center, bottom].
 */
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 The value of the menu item.
 */
    value?: any
  }
}

declare class $materialUi$Paper extends React$Component {
  props: {
    /*
 Children passed into the paper element.
 */
    children?: React$Element<*>,
    /*
 Set to true to generate a circlular paper container.
 */
    circle?: boolean,
    /*
 By default, the paper container will have a border radius.
 Set this to false to generate a container with sharp corners.
 */
    rounded?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Set to false to disable CSS transitions for the paper element.
 */
    transitionEnabled?: boolean,
    /*
 This number represents the zDepth of the paper shadow.
 */
    zDepth?: number
  }
}

declare class $materialUi$Popover extends React$Component {
  props: {
    /*
 This is the DOM element that will be used to set the position of the
 popover.
 */
    anchorEl?: Object,
    /*
 This is the point on the anchor where the popover's
 `targetOrigin` will attach to.
 Options:
 vertical: [top, center, bottom]
 horizontal: [left, middle, right].
 */
    anchorOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 If true, the popover will apply transitions when
 it is added to the DOM.
 */
    animated?: boolean,
    /*
 Override the default animation component used.
 */
    animation?: Function,
    /*
 If true, the popover will hide when the anchor is scrolled off the screen.
 */
    autoCloseWhenOffScreen?: boolean,
    /*
 If true, the popover (potentially) ignores `targetOrigin`
 and `anchorOrigin` to make itself fit on screen,
 which is useful for mobile devices.
 */
    canAutoPosition?: boolean,
    /*
 The content of the popover.
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 Callback function fired when the popover is requested to be closed.

 @param {string} reason The reason for the close request. Possibles values
 are 'clickAway' and 'offScreen'.
 */
    onRequestClose?: (reason: 'clickAway' | 'offScreen') => any,
    /*
 If true, the popover is visible.
 */
    open?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 This is the point on the popover which will attach to
 the anchor's origin.
 Options:
 vertical: [top, center, bottom]
 horizontal: [left, middle, right].
 */
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    /*
 If true, the popover will render on top of an invisible
 layer, which will prevent clicks to the underlying
 elements, and trigger an `onRequestClose('clickAway')` call.
 */
    useLayerForClickAway?: boolean,
    /*
 The zDepth of the popover.
 */
    zDepth?: number
  }
}

declare class $materialUi$Popover$PopoverAnimationDefault
  extends React$Component {
  props: {
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    open: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    zDepth?: number
  }
}

declare class $materialUi$Popover$PopoverAnimationVertical
  extends React$Component {
  props: {
    children?: React$Element<*>,
    className?: string,
    open: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    targetOrigin?: {
      'horizontal': string,
      'vertical': string
    },
    zDepth?: number
  }
}

declare class $materialUi$RadioButton extends React$Component {
  props: {
    /*
 @ignore
 checked if true
 Used internally by `RadioButtonGroup`.
 */
    checked?: boolean,
    /*
 The icon element to show when the radio button is checked.
 */
    checkedIcon?: React$Element<*>,
    /*
 If true, the radio button is disabled.
 */
    disabled?: boolean,
    /*
 Override the inline-styles of the icon element.
 */
    iconStyle?: Object,
    /*
 Override the inline-styles of the input element.
 */
    inputStyle?: Object,
    /*
 @ignore
 Used internally by `RadioButtonGroup`. Use the `labelPosition` property of `RadioButtonGroup` instead.
 Where the label will be placed next to the radio button.
 */
    labelPosition?: 'left' | 'right',
    /*
 Override the inline-styles of the label element.
 */
    labelStyle?: Object,
    /*
 @ignore
 Callback function fired when the radio button is checked. Note that this
 function will not be called if the radio button is part of a
 radio button group: in this case, use the `onChange` property of
 `RadioButtonGroup`.

 @param {object} event `change` event targeting the element.
 @param {string} value The element's `value`.
 */
    onCheck?: (event: Object, value: string) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The icon element to show when the radio button is unchecked.
 */
    uncheckedIcon?: React$Element<*>,
    /*
 The value of the radio button.
 */
    value?: any
  }
}

declare class $materialUi$RadioButton$RadioButtonGroup extends React$Component {
  props: {
    /*
 Should be used to pass `RadioButton` components.
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 The `value` property of the radio button that will be
 selected by default. This takes precedence over the `checked` property
 of the `RadioButton` elements.
 */
    defaultSelected?: any,
    /*
 Where the label will be placed for all child radio buttons.
 This takes precedence over the `labelPosition` property of the
 `RadioButton` elements.
 */
    labelPosition?: 'left' | 'right',
    /*
 The name that will be applied to all child radio buttons.
 */
    name: string,
    /*
 Callback function that is fired when a radio button has
 been checked.

 @param {object} event `change` event targeting the selected
 radio button.
 @param {*} value The `value` of the selected radio button.
 */
    onChange?: (event: Object, value: any) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The `value` of the currently selected radio button.
 */
    valueSelected?: any
  }
}

declare class $materialUi$RaisedButton extends React$Component {
  props: {
    /*
 Override the default background color for the button,
 but not the default disabled background color
 (use `disabledBackgroundColor` for this).
 */
    backgroundColor?: string,
    /*
 Override the inline-styles of the button element.
 */
    buttonStyle?: Object,
    /*
 The content of the button.
 If a label is provided via the `label` prop, the text within the label
 will be displayed in addition to the content provided here.
 */
    children?: React$Element<*>,
    /*
 The CSS class name of the root element.
 */
    className?: string,
    /*
 The element to use as the container for the RaisedButton. Either a string to
 use a DOM element or a ReactElement. This is useful for wrapping the
 RaisedButton in a custom Link component. If a ReactElement is given, ensure
 that it passes all of its given props through to the underlying DOM
 element and renders its children prop for proper integration.
 */
    containerElement?: string | React$Element<*>,
    /*
 If true, the element's ripple effect will be disabled.
 */
    disableTouchRipple?: boolean,
    /*
 If true, the button will be disabled.
 */
    disabled?: boolean,
    /*
 Override the default background color for the button
 when it is disabled.
 */
    disabledBackgroundColor?: string,
    /*
 The color of the button's label when the button is disabled.
 */
    disabledLabelColor?: string,
    /*
 If true, the button will take up the full width of its container.
 */
    fullWidth?: boolean,
    /*
 The URL to link to when the button is clicked.
 */
    href?: string,
    /*
 An icon to be displayed within the button.
 */
    icon?: React$Element<*>,
    /*
 The label to be displayed within the button.
 If content is provided via the `children` prop, that content will be
 displayed in addition to the label provided here.
 */
    label?: string,
    /*
 The color of the button's label.
 */
    labelColor?: string,
    /*
 The position of the button's label relative to the button's `children`.
 */
    labelPosition?: 'before' | 'after',
    /*
 Override the inline-styles of the button's label element.
 */
    labelStyle?: Object,
    /*
 @ignore
 */
    onMouseDown?: Function,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onMouseUp?: Function,
    /*
 @ignore
 */
    onTouchEnd?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 Callback function fired when the button is touch-tapped.

 @param {object} event TouchTap event targeting the button.
 */
    onTouchTap?: (event: Object) => any,
    /*
 Override the inline style of the button overlay.
 */
    overlayStyle?: Object,
    /*
 If true, the button will use the theme's primary color.
 */
    primary?: boolean,
    /*
 Override the inline style of the ripple element.
 */
    rippleStyle?: Object,
    /*
 If true, the button will use the theme's secondary color.
 If both `secondary` and `primary` are true, the button will use
 the theme's primary color.
 */
    secondary?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$RefreshIndicator extends React$Component {
  props: {
    /*
 Override the theme's color of the indicator while it's status is
 "ready" and it's percentage is less than 100.
 */
    color?: string,
    /*
 The absolute left position of the indicator in pixels.
 */
    left: number,
    /*
 Override the theme's color of the indicator while
 it's status is "loading" or when it's percentage is 100.
 */
    loadingColor?: string,
    /*
 The confirmation progress to fetch data. Max value is 100.
 */
    percentage?: number,
    /*
 Size in pixels.
 */
    size?: number,
    /*
 The display status of the indicator. If the status is
 "ready", the indicator will display the ready state
 arrow. If the status is "loading", it will display
 the loading progress indicator. If the status is "hide",
 the indicator will be hidden.
 */
    status?: 'ready' | 'loading' | 'hide',
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The absolute top position of the indicator in pixels.
 */
    top: number
  }
}

declare class $materialUi$SelectField extends React$Component {
  props: {
    /*
 If true, the width will automatically be set according to the
 items inside the menu.
 To control the width in CSS instead, leave this prop set to `false`.
 */
    autoWidth?: boolean,
    /*
 The `MenuItem` elements to populate the select field with.
 If the menu items have a `label` prop, that value will
 represent the selected menu item in the rendered select field.
 */
    children?: React$Element<*>,
    /*
 If true, the select field will be disabled.
 */
    disabled?: boolean,
    /*
 Object that can handle and override any property of component DropDownMenu.
 */
    dropDownMenuProps?: Object,
    /*
 Override the inline-styles of the error element.
 */
    errorStyle?: Object,
    /*
 The error content to display.
 */
    errorText?: React$Element<*>,
    /*
 If true, the floating label will float even when no value is selected.
 */
    floatingLabelFixed?: boolean,
    /*
 Override the inline-styles of the floating label.
 */
    floatingLabelStyle?: Object,
    /*
 The content of the floating label.
 */
    floatingLabelText?: React$Element<*>,
    /*
 If true, the select field will take up the full width of its container.
 */
    fullWidth?: boolean,
    /*
 Override the inline-styles of the hint element.
 */
    hintStyle?: Object,
    /*
 The hint content to display.
 */
    hintText?: React$Element<*>,
    /*
 Override the inline-styles of the icon element.
 */
    iconStyle?: Object,
    /*
 The id prop for the text field.
 */
    id?: string,
    /*
 Override the label style when the select field is inactive.
 */
    labelStyle?: Object,
    /*
 Override the inline-styles of the underlying `List` element.
 */
    listStyle?: Object,
    /*
 Override the default max-height of the underlying `DropDownMenu` element.
 */
    maxHeight?: number,
    /*
 Override the inline-styles of menu items.
 */
    menuItemStyle?: Object,
    /*
 Override the inline-styles of the underlying `DropDownMenu` element.
 */
    menuStyle?: Object,
    /*
 If true, `value` must be an array and the menu will support
 multiple selections.
 */
    multiple?: boolean,
    /*
 @ignore
 */
    onBlur?: Function,
    /*
 Callback function fired when a menu item is selected.

 @param {object} event TouchTap event targeting the menu item
 that was selected.
 @param {number} key The index of the selected menu item, or undefined
 if `multiple` is true.
 @param {any} payload If `multiple` is true, the menu's `value`
 array with either the menu item's `value` added (if
 it wasn't already selected) or omitted (if it was already selected).
 Otherwise, the `value` of the menu item.
 */
    onChange?: (event: Object, key: number, payload: any) => any,
    /*
 @ignore
 */
    onFocus?: Function,
    /*
 Override the inline-styles of selected menu items.
 */
    selectedMenuItemStyle?: Object,
    /*
 Customize the rendering of the selected item.

 @param {any} value If `multiple` is true, the menu's `value`
 array with either the menu item's `value` added (if
 it wasn't already selected) or omitted (if it was already selected).
 Otherwise, the `value` of the menu item.
 */
    selectionRenderer?: (value: any) => any,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override the inline-styles of the underline element when the select
 field is disabled.
 */
    underlineDisabledStyle?: Object,
    /*
 Override the inline-styles of the underline element when the select field
 is focused.
 */
    underlineFocusStyle?: Object,
    /*
 Override the inline-styles of the underline element.
 */
    underlineStyle?: Object,
    /*
 If `multiple` is true, an array of the `value`s of the selected
 menu items. Otherwise, the `value` of the selected menu item.
 If provided, the menu will be a controlled component.
 */
    value?: any
  }
}

declare class $materialUi$Slider extends React$Component {
  props: {
    /*
 The axis on which the slider will slide.
 */
    axis?: 'x' | 'x-reverse' | 'y' | 'y-reverse',
    /*
 The default value of the slider.
 */
    defaultValue?: number,
    /*
 Disables focus ripple if set to true.
 */
    disableFocusRipple?: boolean,
    /*
 If true, the slider will not be interactable.
 */
    disabled?: boolean,
    /*
 The maximum value the slider can slide to on
 a scale from 0 to 1 inclusive. Cannot be equal to min.
 */
    max?: number,
    /*
 The minimum value the slider can slide to on a scale
 from 0 to 1 inclusive. Cannot be equal to max.
 */
    min?: number,
    /*
 The name of the slider. Behaves like the name attribute
 of an input element.
 */
    name?: string,
    /*
 @ignore
 */
    onBlur?: Function,
    /*
 Callback function that is fired when the slider's value changed.

 @param {object} event KeyDown event targeting the slider.
 @param {number} newValue The new value of the slider.
 */
    onChange?: (event: Object, newValue: number) => any,
    /*
 Callback function that is fired when the slider has begun to move.

 @param {object} event MouseDown or TouchStart event targeting the slider.
 */
    onDragStart?: (event: Object) => any,
    /*
 Callback function that is fired when the slide has stopped moving.

 @param {object} event MouseEnd or TouchEnd event targeting the slider.
 */
    onDragStop?: (event: Object) => any,
    /*
 @ignore
 */
    onFocus?: Function,
    /*
 Whether or not the slider is required in a form.
 */
    required?: boolean,
    /*
 Override the inline-styles of the inner slider element.
 */
    sliderStyle?: Object,
    /*
 The granularity the slider can step through values.
 */
    step?: number,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The value of the slider.
 */
    value?: number
  }
}

declare class $materialUi$Snackbar extends React$Component {
  props: {
    /*
 The label for the action on the snackbar.
 */
    action?: React$Element<*>,
    /*
 The number of milliseconds to wait before automatically dismissing.
 If no value is specified the snackbar will dismiss normally.
 If a value is provided the snackbar can still be dismissed normally.
 If a snackbar is dismissed before the timer expires, the timer will be cleared.
 */
    autoHideDuration?: number,
    /*
 Override the inline-styles of the body element.
 */
    bodyStyle?: Object,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Override the inline-styles of the content element.
 */
    contentStyle?: Object,
    /*
 The message to be displayed.

 (Note: If the message is an element or array, and the `Snackbar` may re-render while it is still open,
 ensure that the same object remains as the `message` property if you want to avoid the `Snackbar` hiding and
 showing again)
 */
    message: React$Element<*>,
    /*
 Fired when the action button is touchtapped.

 @param {object} event Action button event.
 */
    onActionTouchTap?: (event: Object) => any,
    /*
 Fired when the `Snackbar` is requested to be closed by a click outside the `Snackbar`, or after the
 `autoHideDuration` timer expires.

 Typically `onRequestClose` is used to set state in the parent component, which is used to control the `Snackbar`
 `open` prop.

 The `reason` parameter can optionally be used to control the response to `onRequestClose`,
 for example ignoring `clickaway`.

 @param {string} reason Can be:`"timeout"` (`autoHideDuration` expired) or: `"clickaway"`
 */
    onRequestClose?: (reason: 'timeout' | 'clickaway') => any,
    /*
 Controls whether the `Snackbar` is opened or not.
 */
    open: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Stepper$Step extends React$Component {
  props: {
    /*
 Sets the step as active. Is passed to child components.
 */
    active?: boolean,
    /*
 Should be `Step` sub-components such as `StepLabel`.
 */
    children?: React$Element<*>,
    /*
 Mark the step as completed. Is passed to child components.
 */
    completed?: boolean,
    /*
 Mark the step as disabled, will also disable the button if
 `StepButton` is a child of `Step`. Is passed to child components.
 */
    disabled?: boolean,
    /*
 @ignore
 Used internally for numbering.
 */
    index?: number,
    /*
 @ignore
 */
    last?: boolean,
    /*
 Override the inline-style of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Stepper$StepButton extends React$Component {
  props: {
    /*
 Passed from `Step` Is passed to StepLabel.
 */
    active?: boolean,
    /*
 Can be a `StepLabel` or a node to place inside `StepLabel` as children.
 */
    children?: React$Element<*>,
    /*
 Sets completed styling. Is passed to StepLabel.
 */
    completed?: boolean,
    /*
 Disables the button and sets disabled styling. Is passed to StepLabel.
 */
    disabled?: boolean,
    /*
 The icon displayed by the step label.
 */
    icon?: React$Element<*> | string | number,
    /*
 Override the inline-styles of the icon container element.
 */
    iconContainerStyle?: Object,
    /*
 @ignore
 */
    last?: boolean,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 @ignore
 */
    onTouchStart?: Function,
    /*
 Override the inline-style of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Stepper$StepContent extends React$Component {
  props: {
    /*
 Expands the content
 */
    active?: boolean,
    /*
 Step content
 */
    children?: React$Element<*>,
    /*
 @ignore
 */
    completed?: boolean,
    /*
 @ignore
 */
    last?: boolean,
    /*
 Override the inline-style of the root element.
 */
    style?: Object,
    /*
 ReactTransitionGroup component.
 */
    transition?: Function,
    /*
 Adjust the duration of the content expand transition. Passed as a prop to the transition component.
 */
    transitionDuration?: number
  }
}

declare class $materialUi$Stepper$StepLabel extends React$Component {
  props: {
    /*
 Sets active styling. Overrides disabled coloring.
 */
    active?: boolean,
    /*
 The label text node
 */
    children?: React$Element<*>,
    /*
 Sets completed styling. Overrides disabled coloring.
 */
    completed?: boolean,
    /*
 Sets disabled styling.
 */
    disabled?: boolean,
    /*
 The icon displayed by the step label.
 */
    icon?: React$Element<*> | string | number,
    /*
 Override the inline-styles of the icon container element.
 */
    iconContainerStyle?: Object,
    /*
 @ignore
 */
    last?: boolean,
    /*
 Override the inline-style of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Stepper extends React$Component {
  props: {
    /*
 Set the active step (zero based index). This will enable `Step` control helpers.
 */
    activeStep?: number,
    /*
 Should be two or mor,e `<Step />` components.
 */
    children?: React$Element<*>,
    /*
 A component to be placed between each step.
 */
    connector?: React$Element<*>,
    /*
 If set to `true`, the `Stepper` will assist in controlling steps for linear flow
 */
    linear?: boolean,
    /*
 The stepper orientation (layout flow direction)
 */
    orientation?: 'horizontal' | 'vertical',
    /*
 Override the inline-style of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Subheader extends React$Component {
  props: {
    /*
 Node that will be placed inside the `Subheader`.
 */
    children?: React$Element<*>,
    /*
 If true, the `Subheader` will be indented.
 */
    inset?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$SvgIcon extends React$Component {
  props: {
    /*
 Elements passed into the SVG Icon.
 */
    children?: React$Element<*>,
    /*
 This is the fill color of the svg icon.
 If not specified, this component will default
 to muiTheme.palette.textColor.
 */
    color?: string,
    /*
 This is the icon color when the mouse hovers over the icon.
 */
    hoverColor?: string,
    /*
 @ignore
 */
    onMouseEnter?: Function,
    /*
 @ignore
 */
    onMouseLeave?: Function,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Allows you to redefine what the coordinates
 without units mean inside an svg element. For example,
 if the SVG element is 500 (width) by 200 (height), and you
 pass viewBox="0 0 50 20", this means that the coordinates inside
 the svg will go from the top left corner (0,0) to bottom right (50,20)
 and each unit will be worth 10px.
 */
    viewBox?: string
  }
}

declare class $materialUi$Table extends React$Component {
  props: {
    /*
 Set to true to indicate that all rows should be selected.
 */
    allRowsSelected?: boolean,
    /*
 Override the inline-styles of the body's table element.
 */
    bodyStyle?: Object,
    /*
 Children passed to table.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 If true, the footer will appear fixed below the table.
 The default value is true.
 */
    fixedFooter?: boolean,
    /*
 If true, the header will appear fixed above the table.
 The default value is true.
 */
    fixedHeader?: boolean,
    /*
 Override the inline-styles of the footer's table element.
 */
    footerStyle?: Object,
    /*
 Override the inline-styles of the header's table element.
 */
    headerStyle?: Object,
    /*
 The height of the table.
 */
    height?: string,
    /*
 If true, multiple table rows can be selected.
 CTRL/CMD+Click and SHIFT+Click are valid actions.
 The default value is false.
 */
    multiSelectable?: boolean,
    /*
 Called when a row cell is clicked.
 rowNumber is the row number and columnId is
 the column number or the column key.
 */
    onCellClick?: Function,
    /*
 Called when a table cell is hovered.
 rowNumber is the row number of the hovered row
 and columnId is the column number or the column key of the cell.
 */
    onCellHover?: Function,
    /*
 Called when a table cell is no longer hovered.
 rowNumber is the row number of the row and columnId
 is the column number or the column key of the cell.
 */
    onCellHoverExit?: Function,
    /*
 Called when a table row is hovered.
 rowNumber is the row number of the hovered row.
 */
    onRowHover?: Function,
    /*
 Called when a table row is no longer hovered.
 rowNumber is the row number of the row that is no longer hovered.
 */
    onRowHoverExit?: Function,
    /*
 Called when a row is selected.
 selectedRows is an array of all row selections.
 IF all rows have been selected, the string "all"
 will be returned instead to indicate that all rows have been selected.
 */
    onRowSelection?: Function,
    /*
 If true, table rows can be selected.
 If multiple row selection is desired, enable multiSelectable.
 The default value is true.
 */
    selectable?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override the inline-styles of the table's wrapper element.
 */
    wrapperStyle?: Object
  }
}

declare class $materialUi$Table$TableBody extends React$Component {
  props: {
    /*
 @ignore
 Set to true to indicate that all rows should be selected.
 */
    allRowsSelected?: boolean,
    /*
 Children passed to table body.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Controls whether or not to deselect all selected
 rows after clicking outside the table.
 */
    deselectOnClickaway?: boolean,
    /*
 Controls the display of the row checkbox. The default value is true.
 */
    displayRowCheckbox?: boolean,
    /*
 @ignore
 If true, multiple table rows can be selected.
 CTRL/CMD+Click and SHIFT+Click are valid actions.
 The default value is false.
 */
    multiSelectable?: boolean,
    /*
 @ignore
 Callback function for when a cell is clicked.
 */
    onCellClick?: Function,
    /*
 @ignore
 Called when a table cell is hovered. rowNumber
 is the row number of the hovered row and columnId
 is the column number or the column key of the cell.
 */
    onCellHover?: Function,
    /*
 @ignore
 Called when a table cell is no longer hovered.
 rowNumber is the row number of the row and columnId
 is the column number or the column key of the cell.
 */
    onCellHoverExit?: Function,
    /*
 @ignore
 Called when a table row is hovered.
 rowNumber is the row number of the hovered row.
 */
    onRowHover?: Function,
    /*
 @ignore
 Called when a table row is no longer
 hovered. rowNumber is the row number of the row
 that is no longer hovered.
 */
    onRowHoverExit?: Function,
    /*
 @ignore
 Called when a row is selected. selectedRows is an
 array of all row selections. If all rows have been selected,
 the string "all" will be returned instead to indicate that
 all rows have been selected.
 */
    onRowSelection?: Function,
    /*
 Controls whether or not the rows are pre-scanned to determine
 initial state. If your table has a large number of rows and
 you are experiencing a delay in rendering, turn off this property.
 */
    preScanRows?: boolean,
    /*
 @ignore
 If true, table rows can be selected. If multiple
 row selection is desired, enable multiSelectable.
 The default value is true.
 */
    selectable?: boolean,
    /*
 If true, table rows will be highlighted when
 the cursor is hovering over the row. The default
 value is false.
 */
    showRowHover?: boolean,
    /*
 If true, every other table row starting
 with the first row will be striped. The default value is false.
 */
    stripedRows?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Table$TableFooter extends React$Component {
  props: {
    /*
 @ignore
 Controls whether or not header rows should be adjusted
 for a checkbox column. If the select all checkbox is true,
 this property will not influence the number of columns.
 This is mainly useful for "super header" rows so that
 the checkbox column does not create an offset that needs
 to be accounted for manually.
 */
    adjustForCheckbox?: boolean,
    /*
 Children passed to table footer.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Table$TableHeader extends React$Component {
  props: {
    /*
 Controls whether or not header rows should be
 adjusted for a checkbox column. If the select all
 checkbox is true, this property will not influence
 the number of columns. This is mainly useful for
 "super header" rows so that the checkbox column
 does not create an offset that needs to be accounted
 for manually.
 */
    adjustForCheckbox?: boolean,
    /*
 Children passed to table header.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Controls whether or not the select all checkbox is displayed.
 */
    displaySelectAll?: boolean,
    /*
 If set to true, the select all button will be interactable.
 If set to false, the button will not be interactable.
 To hide the checkbox, set displaySelectAll to false.
 */
    enableSelectAll?: boolean,
    /*
 @ignore
 Callback when select all has been checked.
 */
    onSelectAll?: Function,
    /*
 @ignore
 True when select all has been checked.
 */
    selectAllSelected?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Table$TableHeaderColumn extends React$Component {
  props: {
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Number to identify the header row. This property
 is automatically populated when used with TableHeader.
 */
    columnNumber?: number,
    /*
 @ignore
 Not used here but we need to remove it from the root element.
 */
    hoverable?: boolean,
    /*
 @ignore
 */
    onClick?: Function,
    /*
 @ignore
 Not used here but we need to remove it from the root element.
 */
    onHover?: Function,
    /*
 @ignore
 Not used here but we need to remove it from the root element.
 */
    onHoverExit?: Function,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The string to supply to the tooltip. If not
 string is supplied no tooltip will be shown.
 */
    tooltip?: string,
    /*
 Additional styling that can be applied to the tooltip.
 */
    tooltipStyle?: Object
  }
}

declare class $materialUi$Table$TableRow extends React$Component {
  props: {
    /*
 Children passed to table row.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 If true, row border will be displayed for the row.
 If false, no border will be drawn.
 */
    displayBorder?: boolean,
    /*
 Controls whether or not the row responds to hover events.
 */
    hoverable?: boolean,
    /*
 Controls whether or not the row should be rendered as being
 hovered. This property is evaluated in addition to this.state.hovered
 and can be used to synchronize the hovered state with some other
 external events.
 */
    hovered?: boolean,
    /*
 @ignore
 Called when a row cell is clicked.
 rowNumber is the row number and columnId is
 the column number or the column key.
 */
    onCellClick?: Function,
    /*
 @ignore
 Called when a table cell is hovered.
 rowNumber is the row number of the hovered row
 and columnId is the column number or the column key of the cell.
 */
    onCellHover?: Function,
    /*
 @ignore
 Called when a table cell is no longer hovered.
 rowNumber is the row number of the row and columnId
 is the column number or the column key of the cell.
 */
    onCellHoverExit?: Function,
    /*
 @ignore
 Called when row is clicked.
 */
    onRowClick?: Function,
    /*
 @ignore
 Called when a table row is hovered.
 rowNumber is the row number of the hovered row.
 */
    onRowHover?: Function,
    /*
 @ignore
 Called when a table row is no longer hovered.
 rowNumber is the row number of the row that is no longer hovered.
 */
    onRowHoverExit?: Function,
    /*
 Number to identify the row. This property is
 automatically populated when used with the TableBody component.
 */
    rowNumber?: number,
    /*
 If true, table rows can be selected. If multiple row
 selection is desired, enable multiSelectable.
 The default value is true.
 */
    selectable?: boolean,
    /*
 Indicates that a particular row is selected.
 This property can be used to programmatically select rows.
 */
    selected?: boolean,
    /*
 Indicates whether or not the row is striped.
 */
    striped?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Table$TableRowColumn extends React$Component {
  props: {
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 @ignore
 Number to identify the header row. This property
 is automatically populated when used with TableHeader.
 */
    columnNumber?: number,
    /*
 @ignore
 If true, this column responds to hover events.
 */
    hoverable?: boolean,
    /*
 @ignore
 */
    onClick?: Function,
    /*
 @ignore
 */
    onHover?: Function,
    /*
 @ignore
 Callback function for hover exit event.
 */
    onHoverExit?: Function,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Tabs$InkBar extends React$Component {
  props: {
    color?: string,
    left: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    width: string
  }
}

declare class $materialUi$Tabs$Tab extends React$Component {
  props: {
    /*
 Override the inline-styles of the button element.
 */
    buttonStyle?: Object,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Sets the icon of the tab, you can pass `FontIcon` or `SvgIcon` elements.
 */
    icon?: React$Element<*>,
    /*
 @ignore
 */
    index?: any,
    /*
 Sets the text value of the tab item to the string specified.
 */
    label?: React$Element<*> | string,
    /*
 Fired when the active tab changes by touch or tap.
 Use this event to specify any functionality when an active tab changes.
 For example - we are using this to route to home when the third tab becomes active.
 This function will always recieve the active tab as it\'s first argument.
 */
    onActive?: Function,
    /*
 @ignore
 This property is overriden by the Tabs component.
 */
    onTouchTap?: Function,
    /*
 @ignore
 Defines if the current tab is selected or not.
 The Tabs component is responsible for setting this property.
 */
    selected?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 If value prop passed to Tabs component, this value prop is also required.
 It assigns a value to the tab so that it can be selected by the Tabs.
 */
    value?: any,
    /*
 @ignore
 This property is overriden by the Tabs component.
 */
    width?: string
  }
}

declare class $materialUi$Tabs$TabTemplate extends React$Component {
  props: {
    children?: React$Element<*>,
    selected?: boolean,
    style?: Object
  }
}

declare class $materialUi$Tabs extends React$Component {
  props: {
    /*
 Should be used to pass `Tab` components.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 The css class name of the content's container.
 */
    contentContainerClassName?: string,
    /*
 Override the inline-styles of the content's container.
 */
    contentContainerStyle?: Object,
    /*
 Specify initial visible tab index.
 If `initialSelectedIndex` is set but larger than the total amount of specified tabs,
 `initialSelectedIndex` will revert back to default.
 If `initialSelectedIndex` is set to any negative value, no tab will be selected intially.
 */
    initialSelectedIndex?: number,
    /*
 Override the inline-styles of the InkBar.
 */
    inkBarStyle?: Object,
    /*
 Called when the selected value change.
 */
    onChange?: Function,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override the inline-styles of the tab-labels container.
 */
    tabItemContainerStyle?: Object,
    /*
 Override the default tab template used to wrap the content of each tab element.
 */
    tabTemplate?: Function,
    /*
 Override the inline-styles of the tab template.
 */
    tabTemplateStyle?: Object,
    /*
 Makes Tabs controllable and selects the tab whose value prop matches this prop.
 */
    value?: any
  }
}

declare class $materialUi$TextField$EnhancedTextarea extends React$Component {
  props: {
    defaultValue?: any,
    disabled?: boolean,
    hintText?: React$Element<*>,
    onChange?: Function,
    onHeightChange?: Function,
    rows?: number,
    rowsMax?: number,
    shadowStyle?: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    textareaStyle?: Object,
    value?: string,
    valueLink?: Object
  }
}

declare class $materialUi$TextField extends React$Component {
  props: {
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 The text string to use for the default value.
 */
    defaultValue?: any,
    /*
 Disables the text field if set to true.
 */
    disabled?: boolean,
    /*
 The style object to use to override error styles.
 */
    errorStyle?: Object,
    /*
 The error content to display.
 */
    errorText?: string | React$Element<*>,
    /*
 If true, the floating label will float even when there is no value.
 */
    floatingLabelFixed?: boolean,
    /*
 The style object to use to override floating label styles when focused.
 */
    floatingLabelFocusStyle?: Object,
    /*
 The style object to use to override floating label styles when shrunk.
 */
    floatingLabelShrinkStyle?: Object,
    /*
 The style object to use to override floating label styles.
 */
    floatingLabelStyle?: Object,
    /*
 The content to use for the floating label element.
 */
    floatingLabelText?: string | React$Element<*>,
    /*
 If true, the field receives the property width 100%.
 */
    fullWidth?: boolean,
    /*
 Override the inline-styles of the TextField's hint text element.
 */
    hintStyle?: Object,
    /*
 The hint content to display.
 */
    hintText?: string | React$Element<*>,
    /*
 The id prop for the text field.
 */
    id?: string,
    /*
 Override the inline-styles of the TextField's input element.
 When multiLine is false: define the style of the input element.
 When multiLine is true: define the style of the container of the textarea.
 */
    inputStyle?: Object,
    /*
 If true, a textarea element will be rendered.
 The textarea also grows and shrinks according to the number of lines.
 */
    multiLine?: boolean,
    /*
 Name applied to the input.
 */
    name?: string,
    /*
 @ignore
 */
    onBlur?: Function,
    /*
 Callback function that is fired when the textfield's value changes.

 @param {object} event Change event targeting the text field.
 @param {string} newValue The new value of the text field.
 */
    onChange?: (event: Object, newValue: string) => any,
    /*
 @ignore
 */
    onFocus?: Function,
    /*
 Number of rows to display when multiLine option is set to true.
 */
    rows?: number,
    /*
 Maximum number of rows to display when
 multiLine option is set to true.
 */
    rowsMax?: number,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override the inline-styles of the TextField's textarea element.
 The TextField use either a textarea or an input,
 this property has effects only when multiLine is true.
 */
    textareaStyle?: Object,
    /*
 Specifies the type of input to display
 such as "password" or "text".
 */
    type?: string,
    /*
 Override the inline-styles of the
 TextField's underline element when disabled.
 */
    underlineDisabledStyle?: Object,
    /*
 Override the inline-styles of the TextField's
 underline element when focussed.
 */
    underlineFocusStyle?: Object,
    /*
 If true, shows the underline for the text field.
 */
    underlineShow?: boolean,
    /*
 Override the inline-styles of the TextField's underline element.
 */
    underlineStyle?: Object,
    /*
 The value of the text field.
 */
    value?: any
  }
}

declare class $materialUi$TextField$TextFieldHint extends React$Component {
  props: {
    /*
 @ignore
 The material-ui theme applied to this component.
 */
    muiTheme: Object,
    /*
 True if the hint text should be visible.
 */
    show?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The hint text displayed.
 */
    text?: React$Element<*>
  }
}

declare class $materialUi$TextField$TextFieldLabel extends React$Component {
  props: {
    /*
 The label contents.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Disables the label if set to true.
 */
    disabled?: boolean,
    /*
 The id of the target element that this label should refer to.
 */
    htmlFor?: string,
    /*
 @ignore
 The material-ui theme applied to this component.
 */
    muiTheme: Object,
    /*
 Callback function for when the label is selected via a touch tap.

 @param {object} event TouchTap event targeting the text field label.
 */
    onTouchTap?: (event: Object) => any,
    /*
 True if the floating label should shrink.
 */
    shrink?: boolean,
    /*
 Override the inline-styles of the root element when shrunk.
 */
    shrinkStyle?: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$TextField$TextFieldUnderline extends React$Component {
  props: {
    /*
 True if the parent `TextField` is disabled.
 */
    disabled?: boolean,
    /*
 Override the inline-styles of the underline when parent `TextField` is disabled.
 */
    disabledStyle?: Object,
    /*
 True if the parent `TextField` has an error.
 */
    error?: boolean,
    /*
 Override the inline-styles of the underline when parent `TextField` has an error.
 */
    errorStyle?: Object,
    /*
 True if the parent `TextField` is focused.
 */
    focus?: boolean,
    /*
 Override the inline-styles of the underline when parent `TextField` is focused.
 */
    focusStyle?: Object,
    /*
 @ignore
 The material-ui theme applied to this component.
 */
    muiTheme: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$TimePicker$Clock extends React$Component {
  props: {
    format?: 'ampm' | '24hr',
    initialTime?: Object,
    onChangeHours?: Function,
    onChangeMinutes?: Function
  }
}

declare class $materialUi$TimePicker$ClockHours extends React$Component {
  props: {
    format?: 'ampm' | '24hr',
    initialHours?: number,
    onChange?: Function
  }
}

declare class $materialUi$TimePicker$ClockMinutes extends React$Component {
  props: {
    initialMinutes?: number,
    onChange?: Function
  }
}

declare class $materialUi$TimePicker$ClockNumber extends React$Component {
  props: {
    isSelected?: boolean,
    onSelected?: Function,
    type?: 'hour' | 'minute',
    value?: number
  }
}

declare class $materialUi$TimePicker$ClockPointer extends React$Component {
  props: {
    hasSelected?: boolean,
    type?: 'hour' | 'minute',
    value?: number
  }
}

declare class $materialUi$TimePicker$TimeDisplay extends React$Component {
  props: {
    affix?: '' | 'pm' | 'am',
    format?: 'ampm' | '24hr',
    mode?: 'hour' | 'minute',
    onSelectAffix?: Function,
    onSelectHour?: Function,
    onSelectMin?: Function,
    selectedTime: Object
  }
}

declare class $materialUi$TimePicker extends React$Component {
  props: {
    /*
 If true, automatically accept and close the picker on set minutes.
 */
    autoOk?: boolean,
    /*
 Override the label of the 'Cancel' button.
 */
    cancelLabel?: React$Element<*>,
    /*
 The initial time value of the TimePicker.
 */
    defaultTime?: Object,
    /*
 Override the inline-styles of TimePickerDialog's body element.
 */
    dialogBodyStyle?: Object,
    /*
 Override the inline-styles of TimePickerDialog's root element.
 */
    dialogStyle?: Object,
    /*
 If true, the TimePicker is disabled.
 */
    disabled?: boolean,
    /*
 Tells the component to display the picker in `ampm` (12hr) format or `24hr` format.
 */
    format?: 'ampm' | '24hr',
    /*
 Override the label of the 'OK' button.
 */
    okLabel?: React$Element<*>,
    /*
 Callback function that is fired when the time value changes. The time value is passed in a Date Object.
 Since there is no particular event associated with the change the first argument will always be null
 and the second argument will be the new Date instance.
 */
    onChange?: Function,
    /*
 Callback function fired when the TimePicker dialog is dismissed.
 */
    onDismiss?: Function,
    /*
 Callback function fired when the TimePicker `TextField` gains focus.
 */
    onFocus?: Function,
    /*
 Callback function fired when the TimePicker dialog is shown.
 */
    onShow?: Function,
    /*
 Callback function fired when the TimePicker is tapped or clicked.
 */
    onTouchTap?: Function,
    /*
 If true, uses ("noon" / "midnight") instead of ("12 a.m." / "12 p.m.").

 It's technically more correct to refer to "12 noon" and "12 midnight" rather than "12 a.m." and "12 p.m."
 and it avoids confusion between different locales. By default (for compatibility reasons) TimePicker uses
 ("12 a.m." / "12 p.m.").
 */
    pedantic?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override the inline-styles of TimePicker's TextField element.
 */
    textFieldStyle?: Object,
    /*
 Sets the time for the Time Picker programmatically.
 */
    value?: Object
  }
}

declare class $materialUi$TimePicker$TimePickerDialog extends React$Component {
  props: {
    autoOk?: boolean,
    bodyStyle?: Object,
    cancelLabel?: React$Element<*>,
    format?: 'ampm' | '24hr',
    initialTime?: Object,
    okLabel?: React$Element<*>,
    onAccept?: Function,
    onDismiss?: Function,
    onShow?: Function,
    style?: Object
  }
}

declare class $materialUi$Toggle extends React$Component {
  props: {
    /*
 Determines whether the Toggle is initially turned on.
 **Warning:** This cannot be used in conjunction with `toggled`.
 Decide between using a controlled or uncontrolled input element and remove one of these props.
 More info: https://fb.me/react-controlled-components
 */
    defaultToggled?: boolean,
    /*
 Will disable the toggle if true.
 */
    disabled?: boolean,
    /*
 Overrides the inline-styles of the Toggle element.
 */
    elementStyle?: Object,
    /*
 Overrides the inline-styles of the Icon element.
 */
    iconStyle?: Object,
    /*
 Overrides the inline-styles of the input element.
 */
    inputStyle?: Object,
    /*
 Label for toggle.
 */
    label?: string | React$Element<*>,
    /*
 Where the label will be placed next to the toggle.
 */
    labelPosition?: 'left' | 'right',
    /*
 Overrides the inline-styles of the Toggle element label.
 */
    labelStyle?: Object,
    /*
 Callback function that is fired when the toggle switch is toggled.

 @param {object} event Change event targeting the toggle.
 @param {bool} isInputChecked The new value of the toggle.
 */
    onToggle?: Function,
    /*
 Override style of ripple.
 */
    rippleStyle?: Object,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 Override style for thumb.
 */
    thumbStyle?: Object,
    /*
 Override the inline styles for thumb when the toggle switch is toggled on.
 */
    thumbSwitchedStyle?: Object,
    /*
 Toggled if set to true.
 */
    toggled?: boolean,
    /*
 Override style for track.
 */
    trackStyle?: Object,
    /*
 Override the inline styles for track when the toggle switch is toggled on.
 */
    trackSwitchedStyle?: Object,
    /*
 ValueLink prop for when using controlled toggle.
 */
    valueLink?: Object
  }
}

declare class $materialUi$Toolbar extends React$Component {
  props: {
    /*
 Can be a `ToolbarGroup` to render a group of related items.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Do not apply `desktopGutter` to the `Toolbar`.
 */
    noGutter?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Toolbar$ToolbarGroup extends React$Component {
  props: {
    /*
 Can be any node or number of nodes.
 */
    children?: React$Element<*>,
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Set this to true for if the `ToolbarGroup` is the first child of `Toolbar`
 to prevent setting the left gap.
 */
    firstChild?: boolean,
    /*
 Set this to true for if the `ToolbarGroup` is the last child of `Toolbar`
 to prevent setting the right gap.
 */
    lastChild?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Toolbar$ToolbarSeparator extends React$Component {
  props: {
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$Toolbar$ToolbarTitle extends React$Component {
  props: {
    /*
 The css class name of the root element.
 */
    className?: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    /*
 The text to be displayed.
 */
    text?: React$Element<*>
  }
}

declare class $materialUi$internal$AppCanvas extends React$Component {
  props: {
    children?: React$Element<*>
  }
}

declare class $materialUi$internal$AutoLockScrolling extends React$Component {
  props: {
    lock: boolean
  }
}

declare class $materialUi$internal$BeforeAfterWrapper extends React$Component {
  props: {
    afterElementType?: string,
    afterStyle?: Object,
    beforeElementType?: string,
    beforeStyle?: Object,
    children?: React$Element<*>,
    elementType?: string,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$internal$CircleRipple extends React$Component {
  props: {
    aborted?: boolean,
    color?: string,
    opacity?: number,
    style?: Object,
    touchGenerated?: boolean
  }
}

declare class $materialUi$internal$ClearFix extends React$Component {
  props: {
    children?: React$Element<*>,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$internal$ClickAwayListener extends React$Component {
  props: {
    children?: React$Element<*>,
    onClickAway?: Function
  }
}

declare class $materialUi$internal$EnhancedButton extends React$Component {
  props: {
    centerRipple?: boolean,
    children?: React$Element<*>,
    containerElement?: string | React$Element<*>,
    disableFocusRipple?: boolean,
    disableKeyboardFocus?: boolean,
    disableTouchRipple?: boolean,
    disabled?: boolean,
    focusRippleColor?: string,
    focusRippleOpacity?: number,
    href?: string,
    keyboardFocused?: boolean,
    onBlur?: Function,
    onClick?: Function,
    onFocus?: Function,
    onKeyDown?: Function,
    onKeyUp?: Function,
    onKeyboardFocus?: Function,
    onTouchTap?: Function,
    style?: Object,
    tabIndex?: number,
    touchRippleColor?: string,
    touchRippleOpacity?: number,
    type?: string
  }
}

declare class $materialUi$internal$EnhancedSwitch extends React$Component {
  props: {
    checked?: boolean,
    className?: string,
    defaultChecked?: boolean,
    disableFocusRipple?: boolean,
    disableTouchRipple?: boolean,
    disabled?: boolean,
    iconStyle?: Object,
    inputStyle?: Object,
    inputType: string,
    label?: React$Element<*>,
    labelPosition?: 'left' | 'right',
    labelStyle?: Object,
    name?: string,
    onBlur?: Function,
    onFocus?: Function,
    onMouseDown?: Function,
    onMouseLeave?: Function,
    onMouseUp?: Function,
    onParentShouldUpdate?: Function,
    onSwitch?: Function,
    onTouchEnd?: Function,
    onTouchStart?: Function,
    rippleColor?: string,
    rippleStyle?: Object,
    style?: Object,
    switchElement: React$Element<*>,
    switched: boolean,
    thumbStyle?: Object,
    trackStyle?: Object,
    value?: any
  }
}

declare class $materialUi$internal$ExpandTransition extends React$Component {
  props: {
    children?: React$Element<*>,
    enterDelay?: number,
    loading?: boolean,
    open?: boolean,
    style?: Object,
    transitionDelay?: number,
    transitionDuration?: number
  }
}

declare class $materialUi$internal$ExpandTransitionChild
  extends React$Component {
  props: {
    children?: React$Element<*>,
    enterDelay?: number,
    style?: Object,
    transitionDelay?: number,
    transitionDuration?: number
  }
}

declare class $materialUi$internal$FocusRipple extends React$Component {
  props: {
    color?: string,
    innerStyle?: Object,
    opacity?: number,
    show?: boolean,
    style?: Object
  }
}

declare class $materialUi$internal$Overlay extends React$Component {
  props: {
    autoLockScrolling?: boolean,
    show: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    transitionEnabled?: boolean
  }
}

declare class $materialUi$internal$RenderToLayer extends React$Component {
  props: {
    componentClickAway?: Function,
    open: boolean,
    render: Function,
    useLayerForClickAway?: boolean
  }
}

declare class $materialUi$internal$ScaleIn extends React$Component {
  props: {
    childStyle?: Object,
    children?: React$Element<*>,
    enterDelay?: number,
    maxScale?: number,
    minScale?: number,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object
  }
}

declare class $materialUi$internal$ScaleInChild extends React$Component {
  props: {
    children?: React$Element<*>,
    enterDelay?: number,
    maxScale?: number,
    minScale?: number,
    style?: Object
  }
}

declare class $materialUi$internal$SlideIn extends React$Component {
  props: {
    childStyle?: Object,
    children?: React$Element<*>,
    direction?: 'left' | 'right' | 'up' | 'down',
    enterDelay?: number,
    style?: Object
  }
}

declare class $materialUi$internal$SlideInChild extends React$Component {
  props: {
    children?: React$Element<*>,
    direction?: string,
    enterDelay?: number,
    getLeaveDirection: Function,
    style?: Object
  }
}

declare class $materialUi$internal$Tooltip extends React$Component {
  props: {
    /*
 The css class name of the root element.
 */
    className?: string,
    horizontalPosition?: 'left' | 'right' | 'center',
    label: React$Element<*>,
    show?: boolean,
    /*
 Override the inline-styles of the root element.
 */
    style?: Object,
    touch?: boolean,
    verticalPosition?: 'top' | 'bottom'
  }
}

declare class $materialUi$internal$TouchRipple extends React$Component {
  props: {
    abortOnScroll?: boolean,
    centerRipple?: boolean,
    children?: React$Element<*>,
    color?: string,
    opacity?: number,
    style?: Object
  }
}

declare class $materialUi$styles$MuiThemeProvider extends React$Component {
  props: {
    children?: React$Element<*>,
    muiTheme?: Object
  }
}

declare module 'material-ui' {
  declare module.exports: any;
}

declare module 'material-ui/AppBar' {
  declare module.exports: typeof $materialUi$AppBar;
}

declare module 'material-ui/AutoComplete' {
  declare module.exports: typeof $materialUi$AutoComplete;
}

declare module 'material-ui/Avatar' {
  declare module.exports: typeof $materialUi$Avatar;
}

declare module 'material-ui/Badge' {
  declare module.exports: typeof $materialUi$Badge;
}

declare module 'material-ui/BottomNavigation' {
  declare module.exports: typeof $materialUi$BottomNavigation;
}

declare module 'material-ui/BottomNavigation/BottomNavigationItem' {
  declare module.exports: typeof $materialUi$BottomNavigation$BottomNavigationItem;
}

declare module 'material-ui/Card' {
  declare module.exports: typeof $materialUi$Card;
}

declare module 'material-ui/Card/CardActions' {
  declare module.exports: typeof $materialUi$Card$CardActions;
}

declare module 'material-ui/Card/CardExpandable' {
  declare module.exports: typeof $materialUi$Card$CardExpandable;
}

declare module 'material-ui/Card/CardHeader' {
  declare module.exports: typeof $materialUi$Card$CardHeader;
}

declare module 'material-ui/Card/CardMedia' {
  declare module.exports: typeof $materialUi$Card$CardMedia;
}

declare module 'material-ui/Card/CardText' {
  declare module.exports: typeof $materialUi$Card$CardText;
}

declare module 'material-ui/Card/CardTitle' {
  declare module.exports: typeof $materialUi$Card$CardTitle;
}

declare module 'material-ui/Checkbox' {
  declare module.exports: typeof $materialUi$Checkbox;
}

declare module 'material-ui/Chip' {
  declare module.exports: typeof $materialUi$Chip;
}

declare module 'material-ui/CircularProgress' {
  declare module.exports: typeof $materialUi$CircularProgress;
}

declare module 'material-ui/DatePicker/Calendar' {
  declare module.exports: typeof $materialUi$DatePicker$Calendar;
}

declare module 'material-ui/DatePicker/CalendarActionButtons' {
  declare module.exports: typeof $materialUi$DatePicker$CalendarActionButtons;
}

declare module 'material-ui/DatePicker/CalendarMonth' {
  declare module.exports: typeof $materialUi$DatePicker$CalendarMonth;
}

declare module 'material-ui/DatePicker/CalendarToolbar' {
  declare module.exports: typeof $materialUi$DatePicker$CalendarToolbar;
}

declare module 'material-ui/DatePicker/CalendarYear' {
  declare module.exports: typeof $materialUi$DatePicker$CalendarYear;
}

declare module 'material-ui/DatePicker/DateDisplay' {
  declare module.exports: typeof $materialUi$DatePicker$DateDisplay;
}

declare module 'material-ui/DatePicker' {
  declare module.exports: typeof $materialUi$DatePicker;
}

declare module 'material-ui/DatePicker/DatePickerDialog' {
  declare module.exports: typeof $materialUi$DatePicker$DatePickerDialog;
}

declare module 'material-ui/DatePicker/DayButton' {
  declare module.exports: typeof $materialUi$DatePicker$DayButton;
}

declare module 'material-ui/DatePicker/YearButton' {
  declare module.exports: typeof $materialUi$DatePicker$YearButton;
}

declare module 'material-ui/Dialog' {
  declare module.exports: typeof $materialUi$Dialog;
}

declare module 'material-ui/Divider' {
  declare module.exports: typeof $materialUi$Divider;
}

declare module 'material-ui/Drawer' {
  declare module.exports: typeof $materialUi$Drawer;
}

declare module 'material-ui/DropDownMenu' {
  declare module.exports: typeof $materialUi$DropDownMenu;
}

declare module 'material-ui/FlatButton' {
  declare module.exports: typeof $materialUi$FlatButton;
}

declare module 'material-ui/FlatButton/FlatButtonLabel' {
  declare module.exports: typeof $materialUi$FlatButton$FlatButtonLabel;
}

declare module 'material-ui/FloatingActionButton' {
  declare module.exports: typeof $materialUi$FloatingActionButton;
}

declare module 'material-ui/FontIcon' {
  declare module.exports: typeof $materialUi$FontIcon;
}

declare module 'material-ui/GridList' {
  declare module.exports: typeof $materialUi$GridList;
}

declare module 'material-ui/GridList/GridTile' {
  declare module.exports: typeof $materialUi$GridList$GridTile;
}

declare module 'material-ui/IconButton' {
  declare module.exports: typeof $materialUi$IconButton;
}

declare module 'material-ui/IconMenu' {
  declare module.exports: typeof $materialUi$IconMenu;
}

declare module 'material-ui/LinearProgress' {
  declare module.exports: typeof $materialUi$LinearProgress;
}

declare module 'material-ui/List' {
  declare module.exports: typeof $materialUi$List;
}

declare module 'material-ui/List/ListItem' {
  declare module.exports: typeof $materialUi$List$ListItem;
}

declare module 'material-ui/List/NestedList' {
  declare module.exports: typeof $materialUi$List$NestedList;
}

declare module 'material-ui/Menu' {
  declare module.exports: typeof $materialUi$Menu;
}

declare module 'material-ui/MenuItem' {
  declare module.exports: typeof $materialUi$MenuItem;
}

declare module 'material-ui/Paper' {
  declare module.exports: typeof $materialUi$Paper;
}

declare module 'material-ui/Popover' {
  declare module.exports: typeof $materialUi$Popover;
}

declare module 'material-ui/Popover/PopoverAnimationDefault' {
  declare module.exports: typeof $materialUi$Popover$PopoverAnimationDefault;
}

declare module 'material-ui/Popover/PopoverAnimationVertical' {
  declare module.exports: typeof $materialUi$Popover$PopoverAnimationVertical;
}

declare module 'material-ui/RadioButton' {
  declare module.exports: typeof $materialUi$RadioButton;
}

declare module 'material-ui/RadioButton/RadioButtonGroup' {
  declare module.exports: typeof $materialUi$RadioButton$RadioButtonGroup;
}

declare module 'material-ui/RaisedButton' {
  declare module.exports: typeof $materialUi$RaisedButton;
}

declare module 'material-ui/RefreshIndicator' {
  declare module.exports: typeof $materialUi$RefreshIndicator;
}

declare module 'material-ui/SelectField' {
  declare module.exports: typeof $materialUi$SelectField;
}

declare module 'material-ui/Slider' {
  declare module.exports: typeof $materialUi$Slider;
}

declare module 'material-ui/Snackbar' {
  declare module.exports: typeof $materialUi$Snackbar;
}

declare module 'material-ui/Stepper/Step' {
  declare module.exports: typeof $materialUi$Stepper$Step;
}

declare module 'material-ui/Stepper/StepButton' {
  declare module.exports: typeof $materialUi$Stepper$StepButton;
}

declare module 'material-ui/Stepper/StepContent' {
  declare module.exports: typeof $materialUi$Stepper$StepContent;
}

declare module 'material-ui/Stepper/StepLabel' {
  declare module.exports: typeof $materialUi$Stepper$StepLabel;
}

declare module 'material-ui/Stepper' {
  declare module.exports: typeof $materialUi$Stepper;
}

declare module 'material-ui/Subheader' {
  declare module.exports: typeof $materialUi$Subheader;
}

declare module 'material-ui/SvgIcon' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/Table' {
  declare module.exports: typeof $materialUi$Table;
}

declare module 'material-ui/Table/TableBody' {
  declare module.exports: typeof $materialUi$Table$TableBody;
}

declare module 'material-ui/Table/TableFooter' {
  declare module.exports: typeof $materialUi$Table$TableFooter;
}

declare module 'material-ui/Table/TableHeader' {
  declare module.exports: typeof $materialUi$Table$TableHeader;
}

declare module 'material-ui/Table/TableHeaderColumn' {
  declare module.exports: typeof $materialUi$Table$TableHeaderColumn;
}

declare module 'material-ui/Table/TableRow' {
  declare module.exports: typeof $materialUi$Table$TableRow;
}

declare module 'material-ui/Table/TableRowColumn' {
  declare module.exports: typeof $materialUi$Table$TableRowColumn;
}

declare module 'material-ui/Tabs/InkBar' {
  declare module.exports: typeof $materialUi$Tabs$InkBar;
}

declare module 'material-ui/Tabs/Tab' {
  declare module.exports: typeof $materialUi$Tabs$Tab;
}

declare module 'material-ui/Tabs/TabTemplate' {
  declare module.exports: typeof $materialUi$Tabs$TabTemplate;
}

declare module 'material-ui/Tabs' {
  declare class exportTabs extends $materialUi$Tabs {
    Tab: typeof $materialUi$Tabs$Tab,
    Tabs: typeof $materialUi$Tabs
  }
  declare var exports: exportTabs;
}

declare module 'material-ui/TextField/EnhancedTextarea' {
  declare module.exports: typeof $materialUi$TextField$EnhancedTextarea;
}

declare module 'material-ui/TextField' {
  declare module.exports: typeof $materialUi$TextField;
}

declare module 'material-ui/TextField/TextFieldHint' {
  declare module.exports: typeof $materialUi$TextField$TextFieldHint;
}

declare module 'material-ui/TextField/TextFieldLabel' {
  declare module.exports: typeof $materialUi$TextField$TextFieldLabel;
}

declare module 'material-ui/TextField/TextFieldUnderline' {
  declare module.exports: typeof $materialUi$TextField$TextFieldUnderline;
}

declare module 'material-ui/TimePicker/Clock' {
  declare module.exports: typeof $materialUi$TimePicker$Clock;
}

declare module 'material-ui/TimePicker/ClockHours' {
  declare module.exports: typeof $materialUi$TimePicker$ClockHours;
}

declare module 'material-ui/TimePicker/ClockMinutes' {
  declare module.exports: typeof $materialUi$TimePicker$ClockMinutes;
}

declare module 'material-ui/TimePicker/ClockNumber' {
  declare module.exports: typeof $materialUi$TimePicker$ClockNumber;
}

declare module 'material-ui/TimePicker/ClockPointer' {
  declare module.exports: typeof $materialUi$TimePicker$ClockPointer;
}

declare module 'material-ui/TimePicker/TimeDisplay' {
  declare module.exports: typeof $materialUi$TimePicker$TimeDisplay;
}

declare module 'material-ui/TimePicker' {
  declare module.exports: typeof $materialUi$TimePicker;
}

declare module 'material-ui/TimePicker/TimePickerDialog' {
  declare module.exports: typeof $materialUi$TimePicker$TimePickerDialog;
}

declare module 'material-ui/Toggle' {
  declare module.exports: typeof $materialUi$Toggle;
}

declare module 'material-ui/Toolbar' {
  declare module.exports: typeof $materialUi$Toolbar;
}

declare module 'material-ui/Toolbar/ToolbarGroup' {
  declare module.exports: typeof $materialUi$Toolbar$ToolbarGroup;
}

declare module 'material-ui/Toolbar/ToolbarSeparator' {
  declare module.exports: typeof $materialUi$Toolbar$ToolbarSeparator;
}

declare module 'material-ui/Toolbar/ToolbarTitle' {
  declare module.exports: typeof $materialUi$Toolbar$ToolbarTitle;
}

declare module 'material-ui/internal/AppCanvas' {
  declare module.exports: typeof $materialUi$internal$AppCanvas;
}

declare module 'material-ui/internal/AutoLockScrolling' {
  declare module.exports: typeof $materialUi$internal$AutoLockScrolling;
}

declare module 'material-ui/internal/BeforeAfterWrapper' {
  declare module.exports: typeof $materialUi$internal$BeforeAfterWrapper;
}

declare module 'material-ui/internal/CircleRipple' {
  declare module.exports: typeof $materialUi$internal$CircleRipple;
}

declare module 'material-ui/internal/ClearFix' {
  declare module.exports: typeof $materialUi$internal$ClearFix;
}

declare module 'material-ui/internal/ClickAwayListener' {
  declare module.exports: typeof $materialUi$internal$ClickAwayListener;
}

declare module 'material-ui/internal/EnhancedButton' {
  declare module.exports: typeof $materialUi$internal$EnhancedButton;
}

declare module 'material-ui/internal/EnhancedSwitch' {
  declare module.exports: typeof $materialUi$internal$EnhancedSwitch;
}

declare module 'material-ui/internal/ExpandTransition' {
  declare module.exports: typeof $materialUi$internal$ExpandTransition;
}

declare module 'material-ui/internal/ExpandTransitionChild' {
  declare module.exports: typeof $materialUi$internal$ExpandTransitionChild;
}

declare module 'material-ui/internal/FocusRipple' {
  declare module.exports: typeof $materialUi$internal$FocusRipple;
}

declare module 'material-ui/internal/Overlay' {
  declare module.exports: typeof $materialUi$internal$Overlay;
}

declare module 'material-ui/internal/RenderToLayer' {
  declare module.exports: typeof $materialUi$internal$RenderToLayer;
}

declare module 'material-ui/internal/ScaleIn' {
  declare module.exports: typeof $materialUi$internal$ScaleIn;
}

declare module 'material-ui/internal/ScaleInChild' {
  declare module.exports: typeof $materialUi$internal$ScaleInChild;
}

declare module 'material-ui/internal/SlideIn' {
  declare module.exports: typeof $materialUi$internal$SlideIn;
}

declare module 'material-ui/internal/SlideInChild' {
  declare module.exports: typeof $materialUi$internal$SlideInChild;
}

declare module 'material-ui/internal/Tooltip' {
  declare module.exports: typeof $materialUi$internal$Tooltip;
}

declare module 'material-ui/internal/TouchRipple' {
  declare module.exports: typeof $materialUi$internal$TouchRipple;
}

declare module 'material-ui/styles/MuiThemeProvider' {
  declare module.exports: typeof $materialUi$styles$MuiThemeProvider;
}

/* SVG Icons */
declare module 'material-ui/svg-icons/action/accessibility' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/accessible' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/account-balance-wallet' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/account-balance' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/account-box' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/account-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/add-shopping-cart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/alarm-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/alarm-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/alarm-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/alarm' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/all-out' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/android' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/announcement' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/aspect-ratio' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assessment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assignment-ind' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assignment-late' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assignment-return' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assignment-returned' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assignment-turned-in' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/assignment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/autorenew' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/backup' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/book' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/bookmark-border' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/bookmark' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/bug-report' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/build' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/cached' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/camera-enhance' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/card-giftcard' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/card-membership' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/card-travel' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/change-history' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/check-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/chrome-reader-mode' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/class' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/code' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/compare-arrows' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/copyright' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/credit-card' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/dashboard' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/date-range' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/delete-forever' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/delete' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/description' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/dns' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/done-all' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/done' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/donut-large' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/donut-small' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/eject' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/euro-symbol' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/event-seat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/event' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/exit-to-app' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/explore' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/extension' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/face' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/favorite-border' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/favorite' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/feedback' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/find-in-page' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/find-replace' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/fingerprint' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/flight-land' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/flight-takeoff' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/flip-to-back' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/flip-to-front' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/g-translate' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/gavel' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/get-app' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/gif' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/grade' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/group-work' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/help-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/help' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/highlight-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/history' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/home' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/hourglass-empty' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/hourglass-full' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/http' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/https' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/important-devices' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/info-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/info' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/input' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/invert-colors' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/label-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/label' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/language' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/launch' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/lightbulb-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/line-style' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/line-weight' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/list' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/lock-open' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/lock-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/loyalty' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/markunread-mailbox' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/motorcycle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/note-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/offline-pin' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/opacity' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/open-in-browser' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/open-in-new' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/open-with' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/pageview' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/pan-tool' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/payment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-camera-mic' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-contact-calendar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-data-setting' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-device-information' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-identity' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-media' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-phone-msg' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/perm-scan-wifi' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/pets' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/picture-in-picture-alt' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/picture-in-picture' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/play-for-work' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/polymer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/power-settings-new' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/pregnant-woman' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/print' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/query-builder' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/question-answer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/receipt' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/record-voice-over' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/redeem' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/remove-shopping-cart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/reorder' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/report-problem' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/restore-page' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/restore' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/room' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/rounded-corner' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/rowing' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/schedule' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/search' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-applications' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-backup-restore' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-bluetooth' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-brightness' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-cell' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-ethernet' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-input-antenna' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-input-component' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-input-composite' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-input-hdmi' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-input-svideo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-overscan' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-phone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-power' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-remote' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings-voice' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/settings' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/shop-two' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/shop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/shopping-basket' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/shopping-cart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/speaker-notes-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/speaker-notes' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/spellcheck' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/stars' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/store' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/subject' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/supervisor-account' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/swap-horiz' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/swap-vert' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/swap-vertical-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/system-update-alt' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/tab-unselected' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/tab' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/theaters' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/three-d-rotation' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/thumb-down' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/thumb-up' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/thumbs-up-down' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/timeline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/toc' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/today' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/toll' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/touch-app' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/track-changes' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/translate' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/trending-down' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/trending-flat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/trending-up' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/turned-in-not' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/turned-in' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/update' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/verified-user' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-agenda' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-array' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-carousel' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-column' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-day' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-headline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-list' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-module' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-quilt' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-stream' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/view-week' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/visibility-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/visibility' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/watch-later' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/work' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/youtube-searched-for' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/zoom-in' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/action/zoom-out' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/alert/add-alert' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/alert/error-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/alert/error' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/alert/warning' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/add-to-queue' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/airplay' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/album' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/art-track' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/av-timer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/branding-watermark' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/call-to-action' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/closed-caption' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/equalizer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/explicit' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fast-forward' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fast-rewind' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/featured-play-list' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/featured-video' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fiber-dvr' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fiber-manual-record' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fiber-new' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fiber-pin' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/fiber-smart-record' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/forward-10' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/forward-30' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/forward-5' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/games' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/hd' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/hearing' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/high-quality' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/library-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/library-books' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/library-music' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/loop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/mic-none' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/mic-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/mic' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/movie' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/music-video' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/new-releases' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/not-interested' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/note' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/pause-circle-filled' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/pause-circle-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/pause' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/play-arrow' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/play-circle-filled' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/play-circle-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/playlist-add-check' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/playlist-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/playlist-play' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/queue-music' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/queue-play-next' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/queue' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/radio' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/recent-actors' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/remove-from-queue' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/repeat-one' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/repeat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/replay-10' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/replay-30' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/replay-5' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/replay' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/shuffle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/skip-next' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/skip-previous' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/slow-motion-video' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/snooze' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/sort-by-alpha' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/stop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/subscriptions' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/subtitles' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/surround-sound' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/video-call' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/video-label' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/video-library' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/videocam-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/videocam' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/volume-down' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/volume-mute' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/volume-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/volume-up' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/web-asset' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/av/web' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/business' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-end' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-made' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-merge' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-missed-outgoing' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-missed' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-received' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call-split' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/call' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/chat-bubble-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/chat-bubble' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/chat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/clear-all' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/comment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/contact-mail' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/contact-phone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/contacts' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/dialer-sip' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/dialpad' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/email' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/forum' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/import-contacts' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/import-export' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/invert-colors-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/live-help' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/location-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/location-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/mail-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/message' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/no-sim' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/phone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/phonelink-erase' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/phonelink-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/phonelink-ring' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/phonelink-setup' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/portable-wifi-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/present-to-all' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/ring-volume' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/rss-feed' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/screen-share' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/speaker-phone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/stay-current-landscape' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/stay-current-portrait' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/stay-primary-landscape' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/stay-primary-portrait' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/stop-screen-share' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/swap-calls' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/textsms' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/voicemail' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/communication/vpn-key' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/add-box' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/add-circle-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/add-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/archive' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/backspace' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/block' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/clear' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/content-copy' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/content-cut' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/content-paste' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/create' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/delete-sweep' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/drafts' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/filter-list' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/flag' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/font-download' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/forward' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/gesture' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/inbox' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/link' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/low-priority' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/mail' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/markunread' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/move-to-inbox' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/next-week' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/redo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/remove-circle-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/remove-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/remove' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/reply-all' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/reply' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/report' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/save' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/select-all' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/send' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/sort' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/text-format' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/unarchive' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/undo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/content/weekend' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/access-alarm' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/access-alarms' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/access-time' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/add-alarm' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/airplanemode-active' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/airplanemode-inactive' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-20' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-30' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-50' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-60' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-80' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-90' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-alert' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-20' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-30' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-50' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-60' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-80' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-90' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-charging-full' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-full' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-std' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/battery-unknown' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/bluetooth-connected' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/bluetooth-disabled' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/bluetooth-searching' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/bluetooth' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/brightness-auto' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/brightness-high' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/brightness-low' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/brightness-medium' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/data-usage' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/developer-mode' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/devices' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/dvr' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/gps-fixed' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/gps-not-fixed' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/gps-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/graphic-eq' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/location-disabled' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/location-searching' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/network-cell' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/network-wifi' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/nfc' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/screen-lock-landscape' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/screen-lock-portrait' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/screen-lock-rotation' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/screen-rotation' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/sd-storage' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/settings-system-daydream' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-0-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-1-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-2-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-3-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-4-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-connected-no-internet-0-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-connected-no-internet-1-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-connected-no-internet-2-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-connected-no-internet-3-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-connected-no-internet-4-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-no-sim' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-null' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-cellular-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-0-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-1-bar-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-1-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-2-bar-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-2-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-3-bar-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-3-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-4-bar-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-4-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/signal-wifi-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/storage' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/usb' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/wallpaper' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/widgets' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/wifi-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/device/wifi-tethering' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/attach-file' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/attach-money' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-all' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-bottom' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-clear' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-color' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-horizontal' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-inner' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-left' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-outer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-style' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-top' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/border-vertical' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/bubble-chart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/drag-handle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-align-center' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-align-justify' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-align-left' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-align-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-bold' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-clear' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-color-fill' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-color-reset' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-color-text' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-indent-decrease' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-indent-increase' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-italic' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-line-spacing' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-list-bulleted' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-list-numbered' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-paint' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-quote' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-shapes' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-size' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-strikethrough' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-textdirection-l-to-r' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-textdirection-r-to-l' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/format-underlined' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/functions' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/highlight' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-chart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-comment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-drive-file' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-emoticon' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-invitation' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-link' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/insert-photo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/linear-scale' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/merge-type' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/mode-comment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/mode-edit' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/monetization-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/money-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/multiline-chart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/pie-chart-outlined' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/pie-chart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/publish' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/short-text' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/show-chart' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/space-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/strikethrough-s' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/text-fields' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/title' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/vertical-align-bottom' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/vertical-align-center' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/vertical-align-top' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/editor/wrap-text' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/attachment' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud-done' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud-download' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud-queue' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud-upload' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/cloud' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/create-new-folder' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/file-download' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/file-upload' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/folder-open' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/folder-shared' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/file/folder' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/cast-connected' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/cast' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/computer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/desktop-mac' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/desktop-windows' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/developer-board' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/device-hub' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/devices-other' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/dock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/gamepad' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/headset-mic' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/headset' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-arrow-down' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-arrow-left' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-arrow-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-arrow-up' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-backspace' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-capslock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-hide' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-return' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-tab' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard-voice' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/keyboard' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/laptop-chromebook' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/laptop-mac' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/laptop-windows' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/laptop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/memory' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/mouse' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/phone-android' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/phone-iphone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/phonelink-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/phonelink' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/power-input' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/router' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/scanner' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/security' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/sim-card' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/smartphone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/speaker-group' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/speaker' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/tablet-android' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/tablet-mac' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/tablet' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/toys' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/tv' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/videogame-asset' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/hardware/watch' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/add-a-photo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/add-to-photos' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/adjust' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/assistant-photo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/assistant' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/audiotrack' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/blur-circular' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/blur-linear' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/blur-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/blur-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-1' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-2' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-3' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-4' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-5' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-6' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brightness-7' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/broken-image' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/brush' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/burst-mode' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/camera-alt' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/camera-front' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/camera-rear' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/camera-roll' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/camera' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/center-focus-strong' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/center-focus-weak' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/collections-bookmark' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/collections' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/color-lens' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/colorize' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/compare' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/control-point-duplicate' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/control-point' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-16-9' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-3-2' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-5-4' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-7-5' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-din' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-free' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-landscape' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-original' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-portrait' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-rotate' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop-square' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/crop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/dehaze' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/details' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/edit' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/exposure-neg-1' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/exposure-neg-2' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/exposure-plus-1' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/exposure-plus-2' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/exposure-zero' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/exposure' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-1' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-2' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-3' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-4' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-5' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-6' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-7' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-8' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-9-plus' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-9' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-b-and-w' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-center-focus' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-drama' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-frames' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-hdr' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-none' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-tilt-shift' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter-vintage' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/filter' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/flare' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/flash-auto' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/flash-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/flash-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/flip' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/gradient' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/grain' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/grid-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/grid-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/hdr-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/hdr-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/hdr-strong' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/hdr-weak' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/healing' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/image-aspect-ratio' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/image' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/iso' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/landscape' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/leak-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/leak-remove' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/lens' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/linked-camera' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks-3' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks-4' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks-5' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks-6' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks-one' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks-two' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/looks' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/loupe' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/monochrome-photos' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/movie-creation' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/movie-filter' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/music-note' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/nature-people' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/nature' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/navigate-before' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/navigate-next' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/palette' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/panorama-fish-eye' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/panorama-horizontal' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/panorama-vertical' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/panorama-wide-angle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/panorama' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-album' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-camera' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-filter' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-library' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-size-select-actual' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-size-select-large' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo-size-select-small' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/photo' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/picture-as-pdf' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/portrait' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/remove-red-eye' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/rotate-90-degrees-ccw' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/rotate-left' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/rotate-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/slideshow' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/straighten' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/style' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/switch-camera' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/switch-video' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/tag-faces' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/texture' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/timelapse' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/timer-10' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/timer-3' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/timer-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/timer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/tonality' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/transform' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/tune' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/view-comfy' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/view-compact' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/vignette' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/wb-auto' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/wb-cloudy' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/wb-incandescent' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/wb-iridescent' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/image/wb-sunny' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/index.es' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/index' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/add-location' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/beenhere' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-bike' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-boat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-bus' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-car' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-railway' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-run' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-subway' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-transit' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions-walk' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/directions' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/edit-location' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/ev-station' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/flight' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/hotel' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/layers-clear' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/layers' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-activity' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-airport' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-atm' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-bar' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-cafe' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-car-wash' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-convenience-store' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-dining' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-drink' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-florist' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-gas-station' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-grocery-store' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-hospital' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-hotel' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-laundry-service' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-library' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-mall' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-movies' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-offer' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-parking' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-pharmacy' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-phone' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-pizza' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-play' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-post-office' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-printshop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-see' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-shipping' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/local-taxi' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/map' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/my-location' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/navigation' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/near-me' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/person-pin-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/person-pin' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/pin-drop' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/place' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/rate-review' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/restaurant-menu' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/restaurant' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/satellite' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/store-mall-directory' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/streetview' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/subway' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/terrain' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/traffic' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/train' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/tram' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/transfer-within-a-station' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/maps/zoom-out-map' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation-arrow-drop-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/apps' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-back' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-downward' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-drop-down-circle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-drop-down' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-drop-up' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-forward' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/arrow-upward' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/cancel' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/check' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/chevron-left' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/chevron-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/close' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/expand-less' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/expand-more' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/first-page' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/fullscreen-exit' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/fullscreen' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/last-page' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/menu' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/more-horiz' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/more-vert' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/refresh' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/subdirectory-arrow-left' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/subdirectory-arrow-right' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/unfold-less' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/navigation/unfold-more' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/adb' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-flat-angled' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-flat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-individual-suite' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-legroom-extra' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-legroom-normal' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-legroom-reduced' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-recline-extra' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/airline-seat-recline-normal' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/bluetooth-audio' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/confirmation-number' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/disc-full' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/do-not-disturb-alt' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/do-not-disturb-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/do-not-disturb-on' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/do-not-disturb' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/drive-eta' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/enhanced-encryption' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/event-available' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/event-busy' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/event-note' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/folder-special' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/live-tv' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/mms' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/more' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/network-check' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/network-locked' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/no-encryption' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/ondemand-video' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/personal-video' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/phone-bluetooth-speaker' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/phone-forwarded' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/phone-in-talk' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/phone-locked' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/phone-missed' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/phone-paused' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/power' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/priority-high' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/rv-hookup' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sd-card' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sim-card-alert' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sms-failed' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sms' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sync-disabled' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sync-problem' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/sync' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/system-update' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/tap-and-play' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/time-to-leave' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/vibration' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/voice-chat' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/vpn-lock' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/wc' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/notification/wifi' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/ac-unit' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/airport-shuttle' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/all-inclusive' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/beach-access' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/business-center' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/casino' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/child-care' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/child-friendly' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/fitness-center' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/free-breakfast' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/golf-course' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/hot-tub' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/kitchen' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/pool' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/room-service' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/rv-hookup' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/smoke-free' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/smoking-rooms' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/places/spa' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/cake' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/domain' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/group-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/group' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/location-city' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/mood-bad' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/mood' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/notifications-active' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/notifications-none' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/notifications-off' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/notifications-paused' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/notifications' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/pages' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/party-mode' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/people-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/people' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/person-add' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/person-outline' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/person' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/plus-one' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/poll' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/public' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/school' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/sentiment-dissatisfied' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/sentiment-neutral' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/sentiment-satisfied' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/sentiment-very-dissatisfied' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/sentiment-very-satisfied' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/share' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/social/whatshot' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/check-box-outline-blank' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/check-box' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/indeterminate-check-box' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/radio-button-checked' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/radio-button-unchecked' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/star-border' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/star-half' {
  declare module.exports: typeof $materialUi$SvgIcon;
}

declare module 'material-ui/svg-icons/toggle/star' {
  declare module.exports: typeof $materialUi$SvgIcon;
}
