#!/usr/bin/env perl

use strict;
use warnings;
use 5.014;

use File::Slurp qw(write_file);
use Time::HiRes qw(usleep);

our $VERSION = '0.01';

my ($pin_sda, $pin_scl) = @ARGV;

if (not (defined $pin_sda and defined $pin_scl)) {
	say STDERR "Usage: $0 <sdapin> <sclpin>";
	exit 1;
}

sub sda {
	my ($value) = @_;
	write_file( "/sys/class/gpio/gpio${pin_sda}/value", $value );
	usleep(3);
}

sub scl {
	my ($value) = @_;
	write_file( "/sys/class/gpio/gpio${pin_scl}/value", $value );
	usleep(3);
}

while ( my $line = <STDIN> ) {
	if ( length($line) ) {
		sda(0);
		scl(0);
		sda($line);
		scl(1);
	}
}

sda(1);
scl(0);
sda(0);

__END__

=head1 NAME

avrshiftd - Write bits into AVR I2C-like shift register

=head1 SYNOPSIS

B<avrshiftd> I<sdapin> I<sclpin>

=head1 VERSION

version 0.01

=head1 DESCRIPTION

B<avrshiftd> reads serial data from stdin (one C<< 1 >> / C<< 0 >> bit per
line, most significant bit first) and stuffs it into an AVR shift register
using an I2C-like protocol. For the AVR code, see the C<< avrshift >>
directory in this repository.

I<sdapin> is the number of the GPIO pin connected to SDA (serial data).
I<sclpin> is the number of the GPIO pin connected to SCL (serial clock).
B<avrshiftd> will write to C<< /sys/class/gpio/gpioxy/value >>, where xy is
I<sdapin> / I<sclpin>, respectively. It expects these pins to be exported
and configured for output and will fail if they are not.

Each bit is transferred to the AVR as soon as it has been read from STDIN.
The serial data is mapped to the AVR outputs upon receipt of EOF.

To give the AVR chip sufficient processing time, there is a delay of at least 6
microseconds between each SCL change. At 8 MHz AVR clock, this equals about 48
AVR clock cycles.

=head1 EXIT STATUS

Zero if all bits were successfully written to the GPIO pins, non-zero
otherwise. Note that a zero exit status does not imply a successful data
transfer -- Both this protocol and the hardware setup are write-only and do not
support ACKs or similar.

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

This script requires perl 5.14 (or higher) with the following extra modules:

=over

=item * File::Slurp

=back

=head1 BUGS AND LIMITATIONS

None known.

=head1 AUTHOR

Copyright (C) 2013 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
