#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use App::Daemon qw(daemonize);
use DateTime;
use File::Slurp qw(read_file write_file);
use LWP::UserAgent;

$App::Daemon::as_user = 'www-data';
$App::Daemon::logfile = '/tmp/dorfmap-bgdata.log';

daemonize();

our $VERSION = '0.01';

my $ua = LWP::UserAgent->new;
$ua->timeout(2);

my $re_pingdev = qr{
	^
	(?<host> [^\s]+ )
	.* type = (?: phone | printer | server | wifi )
}x;

my @printers = ('/tmp/donationprint1/4');

sub slurp {
	my ($file) = @_;

	my $content = read_file( $file, err_mode => 'quiet' );
	if ( defined $content ) {
		chomp $content;
	}
	return $content;
}

sub spew {
	my ( $file, $value ) = @_;

	return write_file( $file, { err_mode => 'quiet' }, $value );
}

sub ping_host {
	my ($host) = @_;

	system( qw( ping -n -c 1 -W 1 ), $host );

	write_file( "/srv/www/${host}.ping", ( $? == 0 ) ? '1' : '0' );

	return;
}

while ( sleep(120) ) {

	for my $printer (@printers) {
		if ( -e $printer and slurp($printer) == 1 ) {
			my $now = DateTime->now( time_zone => 'Europe/Berlin' )->epoch;
			my $modified = ( stat($printer) )[9];
			if ( ( $now - $modified ) > ( 20 * 60 ) ) {
				spew( $printer, "0\n" );
			}
		}
	}

	for my $line ( read_file('coordinates') ) {
		if ( $line =~ $re_pingdev ) {
			ping_host( $+{host} );
		}
	}

	my $res = $ua->get('http://door/status');
	if ( $res->is_success ) {
		write_file( '/srv/www/doorstatus', $res->decoded_content );
	}
	else {
		write_file( '/srv/www/doorstatus', -1 );
	}

}

__END__

=head1 NAME

=head1 SYNOPSIS

=head1 VERSION

=head1 DESCRIPTION

=head1 OPTIONS

=over

=back

=head1 EXIT STATUS

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

=over

=back

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Copyright (C) 2013 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
